// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shoppingcart

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HotItemsServiceClient is the client API for HotItemsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotItemsServiceClient interface {
	ItemAddedToCart(ctx context.Context, in *Item, opts ...grpc.CallOption) (*empty.Empty, error)
}

type hotItemsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotItemsServiceClient(cc grpc.ClientConnInterface) HotItemsServiceClient {
	return &hotItemsServiceClient{cc}
}

func (c *hotItemsServiceClient) ItemAddedToCart(ctx context.Context, in *Item, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/example.shoppingcart.HotItemsService/ItemAddedToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotItemsServiceServer is the server API for HotItemsService service.
// All implementations must embed UnimplementedHotItemsServiceServer
// for forward compatibility
type HotItemsServiceServer interface {
	ItemAddedToCart(context.Context, *Item) (*empty.Empty, error)
	mustEmbedUnimplementedHotItemsServiceServer()
}

// UnimplementedHotItemsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotItemsServiceServer struct {
}

func (UnimplementedHotItemsServiceServer) ItemAddedToCart(context.Context, *Item) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemAddedToCart not implemented")
}
func (UnimplementedHotItemsServiceServer) mustEmbedUnimplementedHotItemsServiceServer() {}

// UnsafeHotItemsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotItemsServiceServer will
// result in compilation errors.
type UnsafeHotItemsServiceServer interface {
	mustEmbedUnimplementedHotItemsServiceServer()
}

func RegisterHotItemsServiceServer(s *grpc.Server, srv HotItemsServiceServer) {
	s.RegisterService(&_HotItemsService_serviceDesc, srv)
}

func _HotItemsService_ItemAddedToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotItemsServiceServer).ItemAddedToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.shoppingcart.HotItemsService/ItemAddedToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotItemsServiceServer).ItemAddedToCart(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

var _HotItemsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.shoppingcart.HotItemsService",
	HandlerType: (*HotItemsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ItemAddedToCart",
			Handler:    _HotItemsService_ItemAddedToCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotitems.proto",
}
