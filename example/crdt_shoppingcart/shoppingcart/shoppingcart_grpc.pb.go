// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shoppingcart

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ShoppingCartServiceClient is the client API for ShoppingCartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingCartServiceClient interface {
	AddItem(ctx context.Context, in *AddLineItem, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveItem(ctx context.Context, in *RemoveLineItem, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCart(ctx context.Context, in *GetShoppingCart, opts ...grpc.CallOption) (*Cart, error)
	WatchCart(ctx context.Context, in *GetShoppingCart, opts ...grpc.CallOption) (ShoppingCartService_WatchCartClient, error)
}

type shoppingCartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingCartServiceClient(cc grpc.ClientConnInterface) ShoppingCartServiceClient {
	return &shoppingCartServiceClient{cc}
}

func (c *shoppingCartServiceClient) AddItem(ctx context.Context, in *AddLineItem, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/example.shoppingcart.ShoppingCartService/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartServiceClient) RemoveItem(ctx context.Context, in *RemoveLineItem, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/example.shoppingcart.ShoppingCartService/RemoveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartServiceClient) GetCart(ctx context.Context, in *GetShoppingCart, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := c.cc.Invoke(ctx, "/example.shoppingcart.ShoppingCartService/GetCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartServiceClient) WatchCart(ctx context.Context, in *GetShoppingCart, opts ...grpc.CallOption) (ShoppingCartService_WatchCartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ShoppingCartService_serviceDesc.Streams[0], "/example.shoppingcart.ShoppingCartService/WatchCart", opts...)
	if err != nil {
		return nil, err
	}
	x := &shoppingCartServiceWatchCartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShoppingCartService_WatchCartClient interface {
	Recv() (*Cart, error)
	grpc.ClientStream
}

type shoppingCartServiceWatchCartClient struct {
	grpc.ClientStream
}

func (x *shoppingCartServiceWatchCartClient) Recv() (*Cart, error) {
	m := new(Cart)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShoppingCartServiceServer is the server API for ShoppingCartService service.
// All implementations must embed UnimplementedShoppingCartServiceServer
// for forward compatibility
type ShoppingCartServiceServer interface {
	AddItem(context.Context, *AddLineItem) (*empty.Empty, error)
	RemoveItem(context.Context, *RemoveLineItem) (*empty.Empty, error)
	GetCart(context.Context, *GetShoppingCart) (*Cart, error)
	WatchCart(*GetShoppingCart, ShoppingCartService_WatchCartServer) error
	mustEmbedUnimplementedShoppingCartServiceServer()
}

// UnimplementedShoppingCartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShoppingCartServiceServer struct {
}

func (UnimplementedShoppingCartServiceServer) AddItem(context.Context, *AddLineItem) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedShoppingCartServiceServer) RemoveItem(context.Context, *RemoveLineItem) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedShoppingCartServiceServer) GetCart(context.Context, *GetShoppingCart) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedShoppingCartServiceServer) WatchCart(*GetShoppingCart, ShoppingCartService_WatchCartServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchCart not implemented")
}
func (UnimplementedShoppingCartServiceServer) mustEmbedUnimplementedShoppingCartServiceServer() {}

// UnsafeShoppingCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingCartServiceServer will
// result in compilation errors.
type UnsafeShoppingCartServiceServer interface {
	mustEmbedUnimplementedShoppingCartServiceServer()
}

func RegisterShoppingCartServiceServer(s *grpc.Server, srv ShoppingCartServiceServer) {
	s.RegisterService(&_ShoppingCartService_serviceDesc, srv)
}

func _ShoppingCartService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLineItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.shoppingcart.ShoppingCartService/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServiceServer).AddItem(ctx, req.(*AddLineItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCartService_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLineItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServiceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.shoppingcart.ShoppingCartService/RemoveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServiceServer).RemoveItem(ctx, req.(*RemoveLineItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCartService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShoppingCart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.shoppingcart.ShoppingCartService/GetCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServiceServer).GetCart(ctx, req.(*GetShoppingCart))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCartService_WatchCart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetShoppingCart)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShoppingCartServiceServer).WatchCart(m, &shoppingCartServiceWatchCartServer{stream})
}

type ShoppingCartService_WatchCartServer interface {
	Send(*Cart) error
	grpc.ServerStream
}

type shoppingCartServiceWatchCartServer struct {
	grpc.ServerStream
}

func (x *shoppingCartServiceWatchCartServer) Send(m *Cart) error {
	return x.ServerStream.SendMsg(m)
}

var _ShoppingCartService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.shoppingcart.ShoppingCartService",
	HandlerType: (*ShoppingCartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _ShoppingCartService_AddItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _ShoppingCartService_RemoveItem_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _ShoppingCartService_GetCart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchCart",
			Handler:       _ShoppingCartService_WatchCart_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shoppingcart.proto",
}
