// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package action

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ActionTckModelClient is the client API for ActionTckModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionTckModelClient interface {
	ProcessUnary(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ProcessStreamedIn(ctx context.Context, opts ...grpc.CallOption) (ActionTckModel_ProcessStreamedInClient, error)
	ProcessStreamedOut(ctx context.Context, in *Request, opts ...grpc.CallOption) (ActionTckModel_ProcessStreamedOutClient, error)
	ProcessStreamed(ctx context.Context, opts ...grpc.CallOption) (ActionTckModel_ProcessStreamedClient, error)
}

type actionTckModelClient struct {
	cc grpc.ClientConnInterface
}

func NewActionTckModelClient(cc grpc.ClientConnInterface) ActionTckModelClient {
	return &actionTckModelClient{cc}
}

func (c *actionTckModelClient) ProcessUnary(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cloudstate.tck.model.action.ActionTckModel/ProcessUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionTckModelClient) ProcessStreamedIn(ctx context.Context, opts ...grpc.CallOption) (ActionTckModel_ProcessStreamedInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ActionTckModel_serviceDesc.Streams[0], "/cloudstate.tck.model.action.ActionTckModel/ProcessStreamedIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionTckModelProcessStreamedInClient{stream}
	return x, nil
}

type ActionTckModel_ProcessStreamedInClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type actionTckModelProcessStreamedInClient struct {
	grpc.ClientStream
}

func (x *actionTckModelProcessStreamedInClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *actionTckModelProcessStreamedInClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionTckModelClient) ProcessStreamedOut(ctx context.Context, in *Request, opts ...grpc.CallOption) (ActionTckModel_ProcessStreamedOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ActionTckModel_serviceDesc.Streams[1], "/cloudstate.tck.model.action.ActionTckModel/ProcessStreamedOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionTckModelProcessStreamedOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionTckModel_ProcessStreamedOutClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type actionTckModelProcessStreamedOutClient struct {
	grpc.ClientStream
}

func (x *actionTckModelProcessStreamedOutClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionTckModelClient) ProcessStreamed(ctx context.Context, opts ...grpc.CallOption) (ActionTckModel_ProcessStreamedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ActionTckModel_serviceDesc.Streams[2], "/cloudstate.tck.model.action.ActionTckModel/ProcessStreamed", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionTckModelProcessStreamedClient{stream}
	return x, nil
}

type ActionTckModel_ProcessStreamedClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type actionTckModelProcessStreamedClient struct {
	grpc.ClientStream
}

func (x *actionTckModelProcessStreamedClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *actionTckModelProcessStreamedClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActionTckModelServer is the server API for ActionTckModel service.
// All implementations must embed UnimplementedActionTckModelServer
// for forward compatibility
type ActionTckModelServer interface {
	ProcessUnary(context.Context, *Request) (*Response, error)
	ProcessStreamedIn(ActionTckModel_ProcessStreamedInServer) error
	ProcessStreamedOut(*Request, ActionTckModel_ProcessStreamedOutServer) error
	ProcessStreamed(ActionTckModel_ProcessStreamedServer) error
	mustEmbedUnimplementedActionTckModelServer()
}

// UnimplementedActionTckModelServer must be embedded to have forward compatible implementations.
type UnimplementedActionTckModelServer struct {
}

func (UnimplementedActionTckModelServer) ProcessUnary(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUnary not implemented")
}
func (UnimplementedActionTckModelServer) ProcessStreamedIn(ActionTckModel_ProcessStreamedInServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStreamedIn not implemented")
}
func (UnimplementedActionTckModelServer) ProcessStreamedOut(*Request, ActionTckModel_ProcessStreamedOutServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStreamedOut not implemented")
}
func (UnimplementedActionTckModelServer) ProcessStreamed(ActionTckModel_ProcessStreamedServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStreamed not implemented")
}
func (UnimplementedActionTckModelServer) mustEmbedUnimplementedActionTckModelServer() {}

// UnsafeActionTckModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionTckModelServer will
// result in compilation errors.
type UnsafeActionTckModelServer interface {
	mustEmbedUnimplementedActionTckModelServer()
}

func RegisterActionTckModelServer(s grpc.ServiceRegistrar, srv ActionTckModelServer) {
	s.RegisterService(&_ActionTckModel_serviceDesc, srv)
}

func _ActionTckModel_ProcessUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionTckModelServer).ProcessUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.tck.model.action.ActionTckModel/ProcessUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionTckModelServer).ProcessUnary(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionTckModel_ProcessStreamedIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ActionTckModelServer).ProcessStreamedIn(&actionTckModelProcessStreamedInServer{stream})
}

type ActionTckModel_ProcessStreamedInServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type actionTckModelProcessStreamedInServer struct {
	grpc.ServerStream
}

func (x *actionTckModelProcessStreamedInServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *actionTckModelProcessStreamedInServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ActionTckModel_ProcessStreamedOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionTckModelServer).ProcessStreamedOut(m, &actionTckModelProcessStreamedOutServer{stream})
}

type ActionTckModel_ProcessStreamedOutServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type actionTckModelProcessStreamedOutServer struct {
	grpc.ServerStream
}

func (x *actionTckModelProcessStreamedOutServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionTckModel_ProcessStreamed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ActionTckModelServer).ProcessStreamed(&actionTckModelProcessStreamedServer{stream})
}

type ActionTckModel_ProcessStreamedServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type actionTckModelProcessStreamedServer struct {
	grpc.ServerStream
}

func (x *actionTckModelProcessStreamedServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *actionTckModelProcessStreamedServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ActionTckModel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.tck.model.action.ActionTckModel",
	HandlerType: (*ActionTckModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessUnary",
			Handler:    _ActionTckModel_ProcessUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessStreamedIn",
			Handler:       _ActionTckModel_ProcessStreamedIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessStreamedOut",
			Handler:       _ActionTckModel_ProcessStreamedOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProcessStreamed",
			Handler:       _ActionTckModel_ProcessStreamed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tck_action.proto",
}

// ActionTwoClient is the client API for ActionTwo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionTwoClient interface {
	Call(ctx context.Context, in *OtherRequest, opts ...grpc.CallOption) (*Response, error)
}

type actionTwoClient struct {
	cc grpc.ClientConnInterface
}

func NewActionTwoClient(cc grpc.ClientConnInterface) ActionTwoClient {
	return &actionTwoClient{cc}
}

func (c *actionTwoClient) Call(ctx context.Context, in *OtherRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cloudstate.tck.model.action.ActionTwo/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionTwoServer is the server API for ActionTwo service.
// All implementations must embed UnimplementedActionTwoServer
// for forward compatibility
type ActionTwoServer interface {
	Call(context.Context, *OtherRequest) (*Response, error)
	mustEmbedUnimplementedActionTwoServer()
}

// UnimplementedActionTwoServer must be embedded to have forward compatible implementations.
type UnimplementedActionTwoServer struct {
}

func (UnimplementedActionTwoServer) Call(context.Context, *OtherRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedActionTwoServer) mustEmbedUnimplementedActionTwoServer() {}

// UnsafeActionTwoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionTwoServer will
// result in compilation errors.
type UnsafeActionTwoServer interface {
	mustEmbedUnimplementedActionTwoServer()
}

func RegisterActionTwoServer(s grpc.ServiceRegistrar, srv ActionTwoServer) {
	s.RegisterService(&_ActionTwo_serviceDesc, srv)
}

func _ActionTwo_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionTwoServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.tck.model.action.ActionTwo/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionTwoServer).Call(ctx, req.(*OtherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ActionTwo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.tck.model.action.ActionTwo",
	HandlerType: (*ActionTwoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _ActionTwo_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tck_action.proto",
}
