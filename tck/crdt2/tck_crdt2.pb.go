// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// == Cloudstate TCK model test for CRDT entites ==
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: tck_crdt2.proto

package crdt2

import (
	_ "github.com/cloudstateio/go-support/cloudstate"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//
// Type of clock for LWWRegister updates.
//
type LWWRegisterClockType int32

const (
	LWWRegisterClockType_DEFAULT               LWWRegisterClockType = 0
	LWWRegisterClockType_REVERSE               LWWRegisterClockType = 1
	LWWRegisterClockType_CUSTOM                LWWRegisterClockType = 2
	LWWRegisterClockType_CUSTOM_AUTO_INCREMENT LWWRegisterClockType = 3
)

// Enum value maps for LWWRegisterClockType.
var (
	LWWRegisterClockType_name = map[int32]string{
		0: "DEFAULT",
		1: "REVERSE",
		2: "CUSTOM",
		3: "CUSTOM_AUTO_INCREMENT",
	}
	LWWRegisterClockType_value = map[string]int32{
		"DEFAULT":               0,
		"REVERSE":               1,
		"CUSTOM":                2,
		"CUSTOM_AUTO_INCREMENT": 3,
	}
)

func (x LWWRegisterClockType) Enum() *LWWRegisterClockType {
	p := new(LWWRegisterClockType)
	*p = x
	return p
}

func (x LWWRegisterClockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LWWRegisterClockType) Descriptor() protoreflect.EnumDescriptor {
	return file_tck_crdt2_proto_enumTypes[0].Descriptor()
}

func (LWWRegisterClockType) Type() protoreflect.EnumType {
	return &file_tck_crdt2_proto_enumTypes[0]
}

func (x LWWRegisterClockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LWWRegisterClockType.Descriptor instead.
func (LWWRegisterClockType) EnumDescriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{0}
}

//
// The CRDT write consistency setting to use for updates.
//
type UpdateWriteConsistency int32

const (
	UpdateWriteConsistency_LOCAL    UpdateWriteConsistency = 0
	UpdateWriteConsistency_MAJORITY UpdateWriteConsistency = 1
	UpdateWriteConsistency_ALL      UpdateWriteConsistency = 2
)

// Enum value maps for UpdateWriteConsistency.
var (
	UpdateWriteConsistency_name = map[int32]string{
		0: "LOCAL",
		1: "MAJORITY",
		2: "ALL",
	}
	UpdateWriteConsistency_value = map[string]int32{
		"LOCAL":    0,
		"MAJORITY": 1,
		"ALL":      2,
	}
)

func (x UpdateWriteConsistency) Enum() *UpdateWriteConsistency {
	p := new(UpdateWriteConsistency)
	*p = x
	return p
}

func (x UpdateWriteConsistency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateWriteConsistency) Descriptor() protoreflect.EnumDescriptor {
	return file_tck_crdt2_proto_enumTypes[1].Descriptor()
}

func (UpdateWriteConsistency) Type() protoreflect.EnumType {
	return &file_tck_crdt2_proto_enumTypes[1]
}

func (x UpdateWriteConsistency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateWriteConsistency.Descriptor instead.
func (UpdateWriteConsistency) EnumDescriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{1}
}

//
// A `Request` message contains any actions that the entity should process.
// Actions must be processed in order. Any actions after a `Fail` may be ignored.
//
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Actions []*RequestAction `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Request) GetActions() []*RequestAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

//
// A `StreamedRequest` message contains actions for streamed responses.
// If `end_state` is set, it specifies a target state for ending the stream.
// If `cancel_update` is set, it specifies an update to apply when the stream is cancelled.
// If `effects` is set, it specifies side effects to return with every streamed response.
// If `initial_update` is set, it specifies an update to apply on the initial request.
// If `empty` is set, then no responses should be streamed (for testing empty stream connections).
// Otherwise, the current state should be streamed on changes.
//
type StreamedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EndState      *State    `protobuf:"bytes,2,opt,name=end_state,json=endState,proto3" json:"end_state,omitempty"`
	CancelUpdate  *Update   `protobuf:"bytes,3,opt,name=cancel_update,json=cancelUpdate,proto3" json:"cancel_update,omitempty"`
	Effects       []*Effect `protobuf:"bytes,4,rep,name=effects,proto3" json:"effects,omitempty"`
	InitialUpdate *Update   `protobuf:"bytes,5,opt,name=initial_update,json=initialUpdate,proto3" json:"initial_update,omitempty"`
	Empty         bool      `protobuf:"varint,6,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *StreamedRequest) Reset() {
	*x = StreamedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamedRequest) ProtoMessage() {}

func (x *StreamedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamedRequest.ProtoReflect.Descriptor instead.
func (*StreamedRequest) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{1}
}

func (x *StreamedRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamedRequest) GetEndState() *State {
	if x != nil {
		return x.EndState
	}
	return nil
}

func (x *StreamedRequest) GetCancelUpdate() *Update {
	if x != nil {
		return x.CancelUpdate
	}
	return nil
}

func (x *StreamedRequest) GetEffects() []*Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *StreamedRequest) GetInitialUpdate() *Update {
	if x != nil {
		return x.InitialUpdate
	}
	return nil
}

func (x *StreamedRequest) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

//
// Each `RequestAction` is one of:
//
// - Update: update the CRDT and return the updated state in the `Response`.
// - Forward: forward to another service, in place of replying with a `Response`.
// - Fail: fail the current `Process` command by sending a failure.
// - Effect: add a side effect to the current reply, forward, or failure.
// - Delete: request for the CRDT to be deleted.
//
type RequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*RequestAction_Update
	//	*RequestAction_Delete
	//	*RequestAction_Forward
	//	*RequestAction_Fail
	//	*RequestAction_Effect
	Action isRequestAction_Action `protobuf_oneof:"action"`
}

func (x *RequestAction) Reset() {
	*x = RequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAction) ProtoMessage() {}

func (x *RequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAction.ProtoReflect.Descriptor instead.
func (*RequestAction) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{2}
}

func (m *RequestAction) GetAction() isRequestAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *RequestAction) GetUpdate() *Update {
	if x, ok := x.GetAction().(*RequestAction_Update); ok {
		return x.Update
	}
	return nil
}

func (x *RequestAction) GetDelete() *Delete {
	if x, ok := x.GetAction().(*RequestAction_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *RequestAction) GetForward() *Forward {
	if x, ok := x.GetAction().(*RequestAction_Forward); ok {
		return x.Forward
	}
	return nil
}

func (x *RequestAction) GetFail() *Fail {
	if x, ok := x.GetAction().(*RequestAction_Fail); ok {
		return x.Fail
	}
	return nil
}

func (x *RequestAction) GetEffect() *Effect {
	if x, ok := x.GetAction().(*RequestAction_Effect); ok {
		return x.Effect
	}
	return nil
}

type isRequestAction_Action interface {
	isRequestAction_Action()
}

type RequestAction_Update struct {
	Update *Update `protobuf:"bytes,1,opt,name=update,proto3,oneof"`
}

type RequestAction_Delete struct {
	Delete *Delete `protobuf:"bytes,2,opt,name=delete,proto3,oneof"`
}

type RequestAction_Forward struct {
	Forward *Forward `protobuf:"bytes,3,opt,name=forward,proto3,oneof"`
}

type RequestAction_Fail struct {
	Fail *Fail `protobuf:"bytes,4,opt,name=fail,proto3,oneof"`
}

type RequestAction_Effect struct {
	Effect *Effect `protobuf:"bytes,5,opt,name=effect,proto3,oneof"`
}

func (*RequestAction_Update) isRequestAction_Action() {}

func (*RequestAction_Delete) isRequestAction_Action() {}

func (*RequestAction_Forward) isRequestAction_Action() {}

func (*RequestAction_Fail) isRequestAction_Action() {}

func (*RequestAction_Effect) isRequestAction_Action() {}

//
// Update the CRDT, with specific update values for particular CRDT types.
//
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*Update_Gcounter
	//	*Update_Pncounter
	//	*Update_Gset
	//	*Update_Orset
	//	*Update_Lwwregister
	//	*Update_Flag
	//	*Update_Ormap
	//	*Update_Vote
	Update           isUpdate_Update        `protobuf_oneof:"update"`
	WriteConsistency UpdateWriteConsistency `protobuf:"varint,9,opt,name=write_consistency,json=writeConsistency,proto3,enum=cloudstate.tck.model.crdt.UpdateWriteConsistency" json:"write_consistency,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{3}
}

func (m *Update) GetUpdate() isUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *Update) GetGcounter() *GCounterUpdate {
	if x, ok := x.GetUpdate().(*Update_Gcounter); ok {
		return x.Gcounter
	}
	return nil
}

func (x *Update) GetPncounter() *PNCounterUpdate {
	if x, ok := x.GetUpdate().(*Update_Pncounter); ok {
		return x.Pncounter
	}
	return nil
}

func (x *Update) GetGset() *GSetUpdate {
	if x, ok := x.GetUpdate().(*Update_Gset); ok {
		return x.Gset
	}
	return nil
}

func (x *Update) GetOrset() *ORSetUpdate {
	if x, ok := x.GetUpdate().(*Update_Orset); ok {
		return x.Orset
	}
	return nil
}

func (x *Update) GetLwwregister() *LWWRegisterUpdate {
	if x, ok := x.GetUpdate().(*Update_Lwwregister); ok {
		return x.Lwwregister
	}
	return nil
}

func (x *Update) GetFlag() *FlagUpdate {
	if x, ok := x.GetUpdate().(*Update_Flag); ok {
		return x.Flag
	}
	return nil
}

func (x *Update) GetOrmap() *ORMapUpdate {
	if x, ok := x.GetUpdate().(*Update_Ormap); ok {
		return x.Ormap
	}
	return nil
}

func (x *Update) GetVote() *VoteUpdate {
	if x, ok := x.GetUpdate().(*Update_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *Update) GetWriteConsistency() UpdateWriteConsistency {
	if x != nil {
		return x.WriteConsistency
	}
	return UpdateWriteConsistency_LOCAL
}

type isUpdate_Update interface {
	isUpdate_Update()
}

type Update_Gcounter struct {
	Gcounter *GCounterUpdate `protobuf:"bytes,1,opt,name=gcounter,proto3,oneof"`
}

type Update_Pncounter struct {
	Pncounter *PNCounterUpdate `protobuf:"bytes,2,opt,name=pncounter,proto3,oneof"`
}

type Update_Gset struct {
	Gset *GSetUpdate `protobuf:"bytes,3,opt,name=gset,proto3,oneof"`
}

type Update_Orset struct {
	Orset *ORSetUpdate `protobuf:"bytes,4,opt,name=orset,proto3,oneof"`
}

type Update_Lwwregister struct {
	Lwwregister *LWWRegisterUpdate `protobuf:"bytes,5,opt,name=lwwregister,proto3,oneof"`
}

type Update_Flag struct {
	Flag *FlagUpdate `protobuf:"bytes,6,opt,name=flag,proto3,oneof"`
}

type Update_Ormap struct {
	Ormap *ORMapUpdate `protobuf:"bytes,7,opt,name=ormap,proto3,oneof"`
}

type Update_Vote struct {
	Vote *VoteUpdate `protobuf:"bytes,8,opt,name=vote,proto3,oneof"`
}

func (*Update_Gcounter) isUpdate_Update() {}

func (*Update_Pncounter) isUpdate_Update() {}

func (*Update_Gset) isUpdate_Update() {}

func (*Update_Orset) isUpdate_Update() {}

func (*Update_Lwwregister) isUpdate_Update() {}

func (*Update_Flag) isUpdate_Update() {}

func (*Update_Ormap) isUpdate_Update() {}

func (*Update_Vote) isUpdate_Update() {}

//
// Update a GCounter CRDT with an increment.
//
type GCounterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Increment uint64 `protobuf:"varint,1,opt,name=increment,proto3" json:"increment,omitempty"`
}

func (x *GCounterUpdate) Reset() {
	*x = GCounterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCounterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCounterUpdate) ProtoMessage() {}

func (x *GCounterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCounterUpdate.ProtoReflect.Descriptor instead.
func (*GCounterUpdate) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{4}
}

func (x *GCounterUpdate) GetIncrement() uint64 {
	if x != nil {
		return x.Increment
	}
	return 0
}

//
// Update a PNCounter CRDT with a change.
//
type PNCounterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change int64 `protobuf:"zigzag64,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (x *PNCounterUpdate) Reset() {
	*x = PNCounterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNCounterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNCounterUpdate) ProtoMessage() {}

func (x *PNCounterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNCounterUpdate.ProtoReflect.Descriptor instead.
func (*PNCounterUpdate) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{5}
}

func (x *PNCounterUpdate) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

//
// Update a GSet CRDT with an additional element.
//
type GSetUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add string `protobuf:"bytes,1,opt,name=add,proto3" json:"add,omitempty"`
}

func (x *GSetUpdate) Reset() {
	*x = GSetUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSetUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSetUpdate) ProtoMessage() {}

func (x *GSetUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSetUpdate.ProtoReflect.Descriptor instead.
func (*GSetUpdate) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{6}
}

func (x *GSetUpdate) GetAdd() string {
	if x != nil {
		return x.Add
	}
	return ""
}

//
// Update an ORSet CRDT by adding or removing elements, or clearing the set.
//
type ORSetUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*ORSetUpdate_Add
	//	*ORSetUpdate_Remove
	//	*ORSetUpdate_Clear
	Action isORSetUpdate_Action `protobuf_oneof:"action"`
}

func (x *ORSetUpdate) Reset() {
	*x = ORSetUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORSetUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORSetUpdate) ProtoMessage() {}

func (x *ORSetUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORSetUpdate.ProtoReflect.Descriptor instead.
func (*ORSetUpdate) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{7}
}

func (m *ORSetUpdate) GetAction() isORSetUpdate_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ORSetUpdate) GetAdd() string {
	if x, ok := x.GetAction().(*ORSetUpdate_Add); ok {
		return x.Add
	}
	return ""
}

func (x *ORSetUpdate) GetRemove() string {
	if x, ok := x.GetAction().(*ORSetUpdate_Remove); ok {
		return x.Remove
	}
	return ""
}

func (x *ORSetUpdate) GetClear() bool {
	if x, ok := x.GetAction().(*ORSetUpdate_Clear); ok {
		return x.Clear
	}
	return false
}

type isORSetUpdate_Action interface {
	isORSetUpdate_Action()
}

type ORSetUpdate_Add struct {
	Add string `protobuf:"bytes,1,opt,name=add,proto3,oneof"`
}

type ORSetUpdate_Remove struct {
	Remove string `protobuf:"bytes,2,opt,name=remove,proto3,oneof"`
}

type ORSetUpdate_Clear struct {
	Clear bool `protobuf:"varint,3,opt,name=clear,proto3,oneof"`
}

func (*ORSetUpdate_Add) isORSetUpdate_Action() {}

func (*ORSetUpdate_Remove) isORSetUpdate_Action() {}

func (*ORSetUpdate_Clear) isORSetUpdate_Action() {}

//
// Update an LWWRegister CRDT with a new value.
//
type LWWRegisterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string            `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Clock *LWWRegisterClock `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (x *LWWRegisterUpdate) Reset() {
	*x = LWWRegisterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWWRegisterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWWRegisterUpdate) ProtoMessage() {}

func (x *LWWRegisterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWWRegisterUpdate.ProtoReflect.Descriptor instead.
func (*LWWRegisterUpdate) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{8}
}

func (x *LWWRegisterUpdate) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LWWRegisterUpdate) GetClock() *LWWRegisterClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

//
// Clock for LWWRegister updates.
//
type LWWRegisterClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClockType        LWWRegisterClockType `protobuf:"varint,1,opt,name=clockType,proto3,enum=cloudstate.tck.model.crdt.LWWRegisterClockType" json:"clockType,omitempty"`
	CustomClockValue int64                `protobuf:"varint,2,opt,name=customClockValue,proto3" json:"customClockValue,omitempty"`
}

func (x *LWWRegisterClock) Reset() {
	*x = LWWRegisterClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWWRegisterClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWWRegisterClock) ProtoMessage() {}

func (x *LWWRegisterClock) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWWRegisterClock.ProtoReflect.Descriptor instead.
func (*LWWRegisterClock) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{9}
}

func (x *LWWRegisterClock) GetClockType() LWWRegisterClockType {
	if x != nil {
		return x.ClockType
	}
	return LWWRegisterClockType_DEFAULT
}

func (x *LWWRegisterClock) GetCustomClockValue() int64 {
	if x != nil {
		return x.CustomClockValue
	}
	return 0
}

//
// Update a Flag CRDT by enabling it.
//
type FlagUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlagUpdate) Reset() {
	*x = FlagUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagUpdate) ProtoMessage() {}

func (x *FlagUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagUpdate.ProtoReflect.Descriptor instead.
func (*FlagUpdate) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{10}
}

//
// Update an ORMap CRDT by adding, updating, or removing entries, or clearing the map.
// Value types are determined by the prefix of the key.
//
type ORMapUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*ORMapUpdate_Add
	//	*ORMapUpdate_Update
	//	*ORMapUpdate_Remove
	//	*ORMapUpdate_Clear
	Action isORMapUpdate_Action `protobuf_oneof:"action"`
}

func (x *ORMapUpdate) Reset() {
	*x = ORMapUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapUpdate) ProtoMessage() {}

func (x *ORMapUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapUpdate.ProtoReflect.Descriptor instead.
func (*ORMapUpdate) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{11}
}

func (m *ORMapUpdate) GetAction() isORMapUpdate_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ORMapUpdate) GetAdd() string {
	if x, ok := x.GetAction().(*ORMapUpdate_Add); ok {
		return x.Add
	}
	return ""
}

func (x *ORMapUpdate) GetUpdate() *ORMapEntryUpdate {
	if x, ok := x.GetAction().(*ORMapUpdate_Update); ok {
		return x.Update
	}
	return nil
}

func (x *ORMapUpdate) GetRemove() string {
	if x, ok := x.GetAction().(*ORMapUpdate_Remove); ok {
		return x.Remove
	}
	return ""
}

func (x *ORMapUpdate) GetClear() bool {
	if x, ok := x.GetAction().(*ORMapUpdate_Clear); ok {
		return x.Clear
	}
	return false
}

type isORMapUpdate_Action interface {
	isORMapUpdate_Action()
}

type ORMapUpdate_Add struct {
	Add string `protobuf:"bytes,1,opt,name=add,proto3,oneof"`
}

type ORMapUpdate_Update struct {
	Update *ORMapEntryUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type ORMapUpdate_Remove struct {
	Remove string `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

type ORMapUpdate_Clear struct {
	Clear bool `protobuf:"varint,4,opt,name=clear,proto3,oneof"`
}

func (*ORMapUpdate_Add) isORMapUpdate_Action() {}

func (*ORMapUpdate_Update) isORMapUpdate_Action() {}

func (*ORMapUpdate_Remove) isORMapUpdate_Action() {}

func (*ORMapUpdate_Clear) isORMapUpdate_Action() {}

//
// Update for an ORMap entry.
//
type ORMapEntryUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Update *Update `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *ORMapEntryUpdate) Reset() {
	*x = ORMapEntryUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapEntryUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapEntryUpdate) ProtoMessage() {}

func (x *ORMapEntryUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapEntryUpdate.ProtoReflect.Descriptor instead.
func (*ORMapEntryUpdate) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{12}
}

func (x *ORMapEntryUpdate) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ORMapEntryUpdate) GetUpdate() *Update {
	if x != nil {
		return x.Update
	}
	return nil
}

//
// Update a Vote CRDT's self vote.
//
type VoteUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfVote bool `protobuf:"varint,1,opt,name=self_vote,json=selfVote,proto3" json:"self_vote,omitempty"`
}

func (x *VoteUpdate) Reset() {
	*x = VoteUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteUpdate) ProtoMessage() {}

func (x *VoteUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteUpdate.ProtoReflect.Descriptor instead.
func (*VoteUpdate) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{13}
}

func (x *VoteUpdate) GetSelfVote() bool {
	if x != nil {
		return x.SelfVote
	}
	return false
}

//
// Delete the CRDT.
//
type Delete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Delete) Reset() {
	*x = Delete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delete) ProtoMessage() {}

func (x *Delete) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delete.ProtoReflect.Descriptor instead.
func (*Delete) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{14}
}

//
// Replace the response with a forward to `cloudstate.tck.model.CrdtTwo/Call`.
// The payload must be an `OtherRequest` message with the given `id`.
//
type Forward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Forward) Reset() {
	*x = Forward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forward) ProtoMessage() {}

func (x *Forward) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forward.ProtoReflect.Descriptor instead.
func (*Forward) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{15}
}

func (x *Forward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//
// Fail the current command with the given description `message`.
//
type Fail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Fail) Reset() {
	*x = Fail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fail) ProtoMessage() {}

func (x *Fail) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fail.ProtoReflect.Descriptor instead.
func (*Fail) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{16}
}

func (x *Fail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//
// Add a side effect to the reply, to `cloudstate.tck.model.CrdtTwo/Call`.
// The payload must be an `OtherRequest` message with the given `id`.
// The side effect should be marked synchronous based on the given `synchronous` value.
//
type Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Synchronous bool   `protobuf:"varint,2,opt,name=synchronous,proto3" json:"synchronous,omitempty"`
}

func (x *Effect) Reset() {
	*x = Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Effect) ProtoMessage() {}

func (x *Effect) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Effect.ProtoReflect.Descriptor instead.
func (*Effect) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{17}
}

func (x *Effect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Effect) GetSynchronous() bool {
	if x != nil {
		return x.Synchronous
	}
	return false
}

//
// The `Response` message must contain the updated state of the CRDT.
//
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{18}
}

func (x *Response) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

//
// Current state of a CRDT, with specific values for particular CRDT types.
//
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*State_Gcounter
	//	*State_Pncounter
	//	*State_Gset
	//	*State_Orset
	//	*State_Lwwregister
	//	*State_Flag
	//	*State_Ormap
	//	*State_Vote
	Value isState_Value `protobuf_oneof:"value"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{19}
}

func (m *State) GetValue() isState_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *State) GetGcounter() *GCounterValue {
	if x, ok := x.GetValue().(*State_Gcounter); ok {
		return x.Gcounter
	}
	return nil
}

func (x *State) GetPncounter() *PNCounterValue {
	if x, ok := x.GetValue().(*State_Pncounter); ok {
		return x.Pncounter
	}
	return nil
}

func (x *State) GetGset() *GSetValue {
	if x, ok := x.GetValue().(*State_Gset); ok {
		return x.Gset
	}
	return nil
}

func (x *State) GetOrset() *ORSetValue {
	if x, ok := x.GetValue().(*State_Orset); ok {
		return x.Orset
	}
	return nil
}

func (x *State) GetLwwregister() *LWWRegisterValue {
	if x, ok := x.GetValue().(*State_Lwwregister); ok {
		return x.Lwwregister
	}
	return nil
}

func (x *State) GetFlag() *FlagValue {
	if x, ok := x.GetValue().(*State_Flag); ok {
		return x.Flag
	}
	return nil
}

func (x *State) GetOrmap() *ORMapValue {
	if x, ok := x.GetValue().(*State_Ormap); ok {
		return x.Ormap
	}
	return nil
}

func (x *State) GetVote() *VoteValue {
	if x, ok := x.GetValue().(*State_Vote); ok {
		return x.Vote
	}
	return nil
}

type isState_Value interface {
	isState_Value()
}

type State_Gcounter struct {
	Gcounter *GCounterValue `protobuf:"bytes,1,opt,name=gcounter,proto3,oneof"`
}

type State_Pncounter struct {
	Pncounter *PNCounterValue `protobuf:"bytes,2,opt,name=pncounter,proto3,oneof"`
}

type State_Gset struct {
	Gset *GSetValue `protobuf:"bytes,3,opt,name=gset,proto3,oneof"`
}

type State_Orset struct {
	Orset *ORSetValue `protobuf:"bytes,4,opt,name=orset,proto3,oneof"`
}

type State_Lwwregister struct {
	Lwwregister *LWWRegisterValue `protobuf:"bytes,5,opt,name=lwwregister,proto3,oneof"`
}

type State_Flag struct {
	Flag *FlagValue `protobuf:"bytes,6,opt,name=flag,proto3,oneof"`
}

type State_Ormap struct {
	Ormap *ORMapValue `protobuf:"bytes,7,opt,name=ormap,proto3,oneof"`
}

type State_Vote struct {
	Vote *VoteValue `protobuf:"bytes,8,opt,name=vote,proto3,oneof"`
}

func (*State_Gcounter) isState_Value() {}

func (*State_Pncounter) isState_Value() {}

func (*State_Gset) isState_Value() {}

func (*State_Orset) isState_Value() {}

func (*State_Lwwregister) isState_Value() {}

func (*State_Flag) isState_Value() {}

func (*State_Ormap) isState_Value() {}

func (*State_Vote) isState_Value() {}

//
// The current state of a GCounter CRDT.
//
type GCounterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GCounterValue) Reset() {
	*x = GCounterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCounterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCounterValue) ProtoMessage() {}

func (x *GCounterValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCounterValue.ProtoReflect.Descriptor instead.
func (*GCounterValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{20}
}

func (x *GCounterValue) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//
// The current state of a PNCounter CRDT.
//
type PNCounterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PNCounterValue) Reset() {
	*x = PNCounterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNCounterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNCounterValue) ProtoMessage() {}

func (x *PNCounterValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNCounterValue.ProtoReflect.Descriptor instead.
func (*PNCounterValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{21}
}

func (x *PNCounterValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//
// The current state of a GSet CRDT.
// Elements should be sorted, for testing of responses.
//
type GSetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []string `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *GSetValue) Reset() {
	*x = GSetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSetValue) ProtoMessage() {}

func (x *GSetValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSetValue.ProtoReflect.Descriptor instead.
func (*GSetValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{22}
}

func (x *GSetValue) GetElements() []string {
	if x != nil {
		return x.Elements
	}
	return nil
}

//
// The current state of an ORSet CRDT.
// Elements should be sorted, for testing of responses.
//
type ORSetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []string `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *ORSetValue) Reset() {
	*x = ORSetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORSetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORSetValue) ProtoMessage() {}

func (x *ORSetValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORSetValue.ProtoReflect.Descriptor instead.
func (*ORSetValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{23}
}

func (x *ORSetValue) GetElements() []string {
	if x != nil {
		return x.Elements
	}
	return nil
}

//
// The current state of an LWWRegister CRDT.
// Always a string in the TCK model tests.
//
type LWWRegisterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LWWRegisterValue) Reset() {
	*x = LWWRegisterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWWRegisterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWWRegisterValue) ProtoMessage() {}

func (x *LWWRegisterValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWWRegisterValue.ProtoReflect.Descriptor instead.
func (*LWWRegisterValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{24}
}

func (x *LWWRegisterValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//
// The current state of a Flag CRDT.
//
type FlagValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FlagValue) Reset() {
	*x = FlagValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagValue) ProtoMessage() {}

func (x *FlagValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagValue.ProtoReflect.Descriptor instead.
func (*FlagValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{25}
}

func (x *FlagValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
// The current state of an ORMap CRDT.
// Entries should be sorted by key, for testing of responses.
//
type ORMapValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ORMapEntryValue `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ORMapValue) Reset() {
	*x = ORMapValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapValue) ProtoMessage() {}

func (x *ORMapValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapValue.ProtoReflect.Descriptor instead.
func (*ORMapValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{26}
}

func (x *ORMapValue) GetEntries() []*ORMapEntryValue {
	if x != nil {
		return x.Entries
	}
	return nil
}

//
// The current state of an ORMap entry.
//
type ORMapEntryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *State `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ORMapEntryValue) Reset() {
	*x = ORMapEntryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapEntryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapEntryValue) ProtoMessage() {}

func (x *ORMapEntryValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapEntryValue.ProtoReflect.Descriptor instead.
func (*ORMapEntryValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{27}
}

func (x *ORMapEntryValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ORMapEntryValue) GetValue() *State {
	if x != nil {
		return x.Value
	}
	return nil
}

//
// The current state of a Vote CRDT.
//
type VoteValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfVote    bool  `protobuf:"varint,1,opt,name=self_vote,json=selfVote,proto3" json:"self_vote,omitempty"`
	VotesFor    int32 `protobuf:"varint,2,opt,name=votes_for,json=votesFor,proto3" json:"votes_for,omitempty"`
	TotalVoters int32 `protobuf:"varint,3,opt,name=total_voters,json=totalVoters,proto3" json:"total_voters,omitempty"`
}

func (x *VoteValue) Reset() {
	*x = VoteValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteValue) ProtoMessage() {}

func (x *VoteValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteValue.ProtoReflect.Descriptor instead.
func (*VoteValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt2_proto_rawDescGZIP(), []int{28}
}

func (x *VoteValue) GetSelfVote() bool {
	if x != nil {
		return x.SelfVote
	}
	return false
}

func (x *VoteValue) GetVotesFor() int32 {
	if x != nil {
		return x.VotesFor
	}
	return 0
}

func (x *VoteValue) GetTotalVoters() int32 {
	if x != nil {
		return x.TotalVoters
	}
	return 0
}

var File_tck_crdt2_proto protoreflect.FileDescriptor

var file_tck_crdt2_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x63, 0x6b, 0x5f, 0x63, 0x72, 0x64, 0x74, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63,
	0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x1a, 0x1b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xc0, 0x43, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xca, 0x02,
	0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0,
	0x43, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc7, 0x02, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a,
	0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x05, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x47, 0x0a, 0x08, 0x67, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74,
	0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x67, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x67, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47,
	0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x67, 0x73, 0x65,
	0x74, 0x12, 0x3e, 0x0a, 0x05, 0x6f, 0x72, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63,
	0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x53,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x73, 0x65,
	0x74, 0x12, 0x50, 0x0a, 0x0b, 0x6c, 0x77, 0x77, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72,
	0x64, 0x74, 0x2e, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x77, 0x77, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74,
	0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x3e, 0x0a, 0x05, 0x6f, 0x72, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x6d, 0x61, 0x70,
	0x12, 0x3b, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x5e, 0x0a,
	0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x10, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x08, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x0e, 0x47, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x0f, 0x50, 0x4e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x1e, 0x0a, 0x0a, 0x47, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x64, 0x64, 0x22, 0x5d, 0x0a, 0x0b, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x16, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x6c, 0x0a, 0x11, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x8d, 0x01, 0x0a, 0x10, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4d, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x0c, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa4, 0x01,
	0x0a, 0x0b, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64,
	0x64, 0x12, 0x45, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74,
	0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x10, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x56, 0x6f, 0x74, 0x65,
	0x22, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x07, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x6f, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa6, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x08, 0x67, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e,
	0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x67, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x09, 0x70, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x67, 0x73, 0x65, 0x74,
	0x12, 0x3d, 0x0a, 0x05, 0x6f, 0x72, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x53, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x73, 0x65, 0x74, 0x12,
	0x4f, 0x0a, 0x0b, 0x6c, 0x77, 0x77, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74,
	0x2e, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x77, 0x77, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x05,
	0x6f, 0x72, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x6d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x25, 0x0a, 0x0d, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x50, 0x4e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x27, 0x0a, 0x09, 0x47, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x0a, 0x4f, 0x52, 0x53, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x28, 0x0a, 0x10, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x09,
	0x46, 0x6c, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x52, 0x0a, 0x0a, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x0f, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x68, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x2a, 0x57, 0x0a, 0x14, 0x4c, 0x57,
	0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x2a, 0x3a, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x4a, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x32,
	0xc8, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x64, 0x74, 0x54, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x52, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x5a, 0x0a, 0x07, 0x43, 0x72,
	0x64, 0x74, 0x54, 0x77, 0x6f, 0x12, 0x4f, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x22, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74,
	0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4d, 0x0a, 0x17, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x69, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x74, 0x63, 0x6b, 0x2f, 0x63, 0x72, 0x64, 0x74, 0x32, 0x3b,
	0x63, 0x72, 0x64, 0x74, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tck_crdt2_proto_rawDescOnce sync.Once
	file_tck_crdt2_proto_rawDescData = file_tck_crdt2_proto_rawDesc
)

func file_tck_crdt2_proto_rawDescGZIP() []byte {
	file_tck_crdt2_proto_rawDescOnce.Do(func() {
		file_tck_crdt2_proto_rawDescData = protoimpl.X.CompressGZIP(file_tck_crdt2_proto_rawDescData)
	})
	return file_tck_crdt2_proto_rawDescData
}

var file_tck_crdt2_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tck_crdt2_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_tck_crdt2_proto_goTypes = []interface{}{
	(LWWRegisterClockType)(0),   // 0: cloudstate.tck.model.crdt.LWWRegisterClockType
	(UpdateWriteConsistency)(0), // 1: cloudstate.tck.model.crdt.UpdateWriteConsistency
	(*Request)(nil),             // 2: cloudstate.tck.model.crdt.Request
	(*StreamedRequest)(nil),     // 3: cloudstate.tck.model.crdt.StreamedRequest
	(*RequestAction)(nil),       // 4: cloudstate.tck.model.crdt.RequestAction
	(*Update)(nil),              // 5: cloudstate.tck.model.crdt.Update
	(*GCounterUpdate)(nil),      // 6: cloudstate.tck.model.crdt.GCounterUpdate
	(*PNCounterUpdate)(nil),     // 7: cloudstate.tck.model.crdt.PNCounterUpdate
	(*GSetUpdate)(nil),          // 8: cloudstate.tck.model.crdt.GSetUpdate
	(*ORSetUpdate)(nil),         // 9: cloudstate.tck.model.crdt.ORSetUpdate
	(*LWWRegisterUpdate)(nil),   // 10: cloudstate.tck.model.crdt.LWWRegisterUpdate
	(*LWWRegisterClock)(nil),    // 11: cloudstate.tck.model.crdt.LWWRegisterClock
	(*FlagUpdate)(nil),          // 12: cloudstate.tck.model.crdt.FlagUpdate
	(*ORMapUpdate)(nil),         // 13: cloudstate.tck.model.crdt.ORMapUpdate
	(*ORMapEntryUpdate)(nil),    // 14: cloudstate.tck.model.crdt.ORMapEntryUpdate
	(*VoteUpdate)(nil),          // 15: cloudstate.tck.model.crdt.VoteUpdate
	(*Delete)(nil),              // 16: cloudstate.tck.model.crdt.Delete
	(*Forward)(nil),             // 17: cloudstate.tck.model.crdt.Forward
	(*Fail)(nil),                // 18: cloudstate.tck.model.crdt.Fail
	(*Effect)(nil),              // 19: cloudstate.tck.model.crdt.Effect
	(*Response)(nil),            // 20: cloudstate.tck.model.crdt.Response
	(*State)(nil),               // 21: cloudstate.tck.model.crdt.State
	(*GCounterValue)(nil),       // 22: cloudstate.tck.model.crdt.GCounterValue
	(*PNCounterValue)(nil),      // 23: cloudstate.tck.model.crdt.PNCounterValue
	(*GSetValue)(nil),           // 24: cloudstate.tck.model.crdt.GSetValue
	(*ORSetValue)(nil),          // 25: cloudstate.tck.model.crdt.ORSetValue
	(*LWWRegisterValue)(nil),    // 26: cloudstate.tck.model.crdt.LWWRegisterValue
	(*FlagValue)(nil),           // 27: cloudstate.tck.model.crdt.FlagValue
	(*ORMapValue)(nil),          // 28: cloudstate.tck.model.crdt.ORMapValue
	(*ORMapEntryValue)(nil),     // 29: cloudstate.tck.model.crdt.ORMapEntryValue
	(*VoteValue)(nil),           // 30: cloudstate.tck.model.crdt.VoteValue
}
var file_tck_crdt2_proto_depIdxs = []int32{
	4,  // 0: cloudstate.tck.model.crdt.Request.actions:type_name -> cloudstate.tck.model.crdt.RequestAction
	21, // 1: cloudstate.tck.model.crdt.StreamedRequest.end_state:type_name -> cloudstate.tck.model.crdt.State
	5,  // 2: cloudstate.tck.model.crdt.StreamedRequest.cancel_update:type_name -> cloudstate.tck.model.crdt.Update
	19, // 3: cloudstate.tck.model.crdt.StreamedRequest.effects:type_name -> cloudstate.tck.model.crdt.Effect
	5,  // 4: cloudstate.tck.model.crdt.StreamedRequest.initial_update:type_name -> cloudstate.tck.model.crdt.Update
	5,  // 5: cloudstate.tck.model.crdt.RequestAction.update:type_name -> cloudstate.tck.model.crdt.Update
	16, // 6: cloudstate.tck.model.crdt.RequestAction.delete:type_name -> cloudstate.tck.model.crdt.Delete
	17, // 7: cloudstate.tck.model.crdt.RequestAction.forward:type_name -> cloudstate.tck.model.crdt.Forward
	18, // 8: cloudstate.tck.model.crdt.RequestAction.fail:type_name -> cloudstate.tck.model.crdt.Fail
	19, // 9: cloudstate.tck.model.crdt.RequestAction.effect:type_name -> cloudstate.tck.model.crdt.Effect
	6,  // 10: cloudstate.tck.model.crdt.Update.gcounter:type_name -> cloudstate.tck.model.crdt.GCounterUpdate
	7,  // 11: cloudstate.tck.model.crdt.Update.pncounter:type_name -> cloudstate.tck.model.crdt.PNCounterUpdate
	8,  // 12: cloudstate.tck.model.crdt.Update.gset:type_name -> cloudstate.tck.model.crdt.GSetUpdate
	9,  // 13: cloudstate.tck.model.crdt.Update.orset:type_name -> cloudstate.tck.model.crdt.ORSetUpdate
	10, // 14: cloudstate.tck.model.crdt.Update.lwwregister:type_name -> cloudstate.tck.model.crdt.LWWRegisterUpdate
	12, // 15: cloudstate.tck.model.crdt.Update.flag:type_name -> cloudstate.tck.model.crdt.FlagUpdate
	13, // 16: cloudstate.tck.model.crdt.Update.ormap:type_name -> cloudstate.tck.model.crdt.ORMapUpdate
	15, // 17: cloudstate.tck.model.crdt.Update.vote:type_name -> cloudstate.tck.model.crdt.VoteUpdate
	1,  // 18: cloudstate.tck.model.crdt.Update.write_consistency:type_name -> cloudstate.tck.model.crdt.UpdateWriteConsistency
	11, // 19: cloudstate.tck.model.crdt.LWWRegisterUpdate.clock:type_name -> cloudstate.tck.model.crdt.LWWRegisterClock
	0,  // 20: cloudstate.tck.model.crdt.LWWRegisterClock.clockType:type_name -> cloudstate.tck.model.crdt.LWWRegisterClockType
	14, // 21: cloudstate.tck.model.crdt.ORMapUpdate.update:type_name -> cloudstate.tck.model.crdt.ORMapEntryUpdate
	5,  // 22: cloudstate.tck.model.crdt.ORMapEntryUpdate.update:type_name -> cloudstate.tck.model.crdt.Update
	21, // 23: cloudstate.tck.model.crdt.Response.state:type_name -> cloudstate.tck.model.crdt.State
	22, // 24: cloudstate.tck.model.crdt.State.gcounter:type_name -> cloudstate.tck.model.crdt.GCounterValue
	23, // 25: cloudstate.tck.model.crdt.State.pncounter:type_name -> cloudstate.tck.model.crdt.PNCounterValue
	24, // 26: cloudstate.tck.model.crdt.State.gset:type_name -> cloudstate.tck.model.crdt.GSetValue
	25, // 27: cloudstate.tck.model.crdt.State.orset:type_name -> cloudstate.tck.model.crdt.ORSetValue
	26, // 28: cloudstate.tck.model.crdt.State.lwwregister:type_name -> cloudstate.tck.model.crdt.LWWRegisterValue
	27, // 29: cloudstate.tck.model.crdt.State.flag:type_name -> cloudstate.tck.model.crdt.FlagValue
	28, // 30: cloudstate.tck.model.crdt.State.ormap:type_name -> cloudstate.tck.model.crdt.ORMapValue
	30, // 31: cloudstate.tck.model.crdt.State.vote:type_name -> cloudstate.tck.model.crdt.VoteValue
	29, // 32: cloudstate.tck.model.crdt.ORMapValue.entries:type_name -> cloudstate.tck.model.crdt.ORMapEntryValue
	21, // 33: cloudstate.tck.model.crdt.ORMapEntryValue.value:type_name -> cloudstate.tck.model.crdt.State
	2,  // 34: cloudstate.tck.model.crdt.CrdtTckModel.Process:input_type -> cloudstate.tck.model.crdt.Request
	3,  // 35: cloudstate.tck.model.crdt.CrdtTckModel.ProcessStreamed:input_type -> cloudstate.tck.model.crdt.StreamedRequest
	2,  // 36: cloudstate.tck.model.crdt.CrdtTwo.Call:input_type -> cloudstate.tck.model.crdt.Request
	20, // 37: cloudstate.tck.model.crdt.CrdtTckModel.Process:output_type -> cloudstate.tck.model.crdt.Response
	20, // 38: cloudstate.tck.model.crdt.CrdtTckModel.ProcessStreamed:output_type -> cloudstate.tck.model.crdt.Response
	20, // 39: cloudstate.tck.model.crdt.CrdtTwo.Call:output_type -> cloudstate.tck.model.crdt.Response
	37, // [37:40] is the sub-list for method output_type
	34, // [34:37] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_tck_crdt2_proto_init() }
func file_tck_crdt2_proto_init() {
	if File_tck_crdt2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tck_crdt2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCounterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNCounterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSetUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORSetUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWWRegisterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWWRegisterClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapEntryUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCounterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNCounterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORSetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWWRegisterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapEntryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tck_crdt2_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RequestAction_Update)(nil),
		(*RequestAction_Delete)(nil),
		(*RequestAction_Forward)(nil),
		(*RequestAction_Fail)(nil),
		(*RequestAction_Effect)(nil),
	}
	file_tck_crdt2_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Update_Gcounter)(nil),
		(*Update_Pncounter)(nil),
		(*Update_Gset)(nil),
		(*Update_Orset)(nil),
		(*Update_Lwwregister)(nil),
		(*Update_Flag)(nil),
		(*Update_Ormap)(nil),
		(*Update_Vote)(nil),
	}
	file_tck_crdt2_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ORSetUpdate_Add)(nil),
		(*ORSetUpdate_Remove)(nil),
		(*ORSetUpdate_Clear)(nil),
	}
	file_tck_crdt2_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ORMapUpdate_Add)(nil),
		(*ORMapUpdate_Update)(nil),
		(*ORMapUpdate_Remove)(nil),
		(*ORMapUpdate_Clear)(nil),
	}
	file_tck_crdt2_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*State_Gcounter)(nil),
		(*State_Pncounter)(nil),
		(*State_Gset)(nil),
		(*State_Orset)(nil),
		(*State_Lwwregister)(nil),
		(*State_Flag)(nil),
		(*State_Ormap)(nil),
		(*State_Vote)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tck_crdt2_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tck_crdt2_proto_goTypes,
		DependencyIndexes: file_tck_crdt2_proto_depIdxs,
		EnumInfos:         file_tck_crdt2_proto_enumTypes,
		MessageInfos:      file_tck_crdt2_proto_msgTypes,
	}.Build()
	File_tck_crdt2_proto = out.File
	file_tck_crdt2_proto_rawDesc = nil
	file_tck_crdt2_proto_goTypes = nil
	file_tck_crdt2_proto_depIdxs = nil
}
