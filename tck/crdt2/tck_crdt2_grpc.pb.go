// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package crdt2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CrdtTckModelClient is the client API for CrdtTckModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrdtTckModelClient interface {
	Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ProcessStreamed(ctx context.Context, in *StreamedRequest, opts ...grpc.CallOption) (CrdtTckModel_ProcessStreamedClient, error)
}

type crdtTckModelClient struct {
	cc grpc.ClientConnInterface
}

func NewCrdtTckModelClient(cc grpc.ClientConnInterface) CrdtTckModelClient {
	return &crdtTckModelClient{cc}
}

func (c *crdtTckModelClient) Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cloudstate.tck.model.crdt.CrdtTckModel/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crdtTckModelClient) ProcessStreamed(ctx context.Context, in *StreamedRequest, opts ...grpc.CallOption) (CrdtTckModel_ProcessStreamedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrdtTckModel_serviceDesc.Streams[0], "/cloudstate.tck.model.crdt.CrdtTckModel/ProcessStreamed", opts...)
	if err != nil {
		return nil, err
	}
	x := &crdtTckModelProcessStreamedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrdtTckModel_ProcessStreamedClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type crdtTckModelProcessStreamedClient struct {
	grpc.ClientStream
}

func (x *crdtTckModelProcessStreamedClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrdtTckModelServer is the server API for CrdtTckModel service.
// All implementations must embed UnimplementedCrdtTckModelServer
// for forward compatibility
type CrdtTckModelServer interface {
	Process(context.Context, *Request) (*Response, error)
	ProcessStreamed(*StreamedRequest, CrdtTckModel_ProcessStreamedServer) error
	mustEmbedUnimplementedCrdtTckModelServer()
}

// UnimplementedCrdtTckModelServer must be embedded to have forward compatible implementations.
type UnimplementedCrdtTckModelServer struct {
}

func (UnimplementedCrdtTckModelServer) Process(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedCrdtTckModelServer) ProcessStreamed(*StreamedRequest, CrdtTckModel_ProcessStreamedServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStreamed not implemented")
}
func (UnimplementedCrdtTckModelServer) mustEmbedUnimplementedCrdtTckModelServer() {}

// UnsafeCrdtTckModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrdtTckModelServer will
// result in compilation errors.
type UnsafeCrdtTckModelServer interface {
	mustEmbedUnimplementedCrdtTckModelServer()
}

func RegisterCrdtTckModelServer(s *grpc.Server, srv CrdtTckModelServer) {
	s.RegisterService(&_CrdtTckModel_serviceDesc, srv)
}

func _CrdtTckModel_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtTckModelServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.tck.model.crdt.CrdtTckModel/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtTckModelServer).Process(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrdtTckModel_ProcessStreamed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrdtTckModelServer).ProcessStreamed(m, &crdtTckModelProcessStreamedServer{stream})
}

type CrdtTckModel_ProcessStreamedServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type crdtTckModelProcessStreamedServer struct {
	grpc.ServerStream
}

func (x *crdtTckModelProcessStreamedServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _CrdtTckModel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.tck.model.crdt.CrdtTckModel",
	HandlerType: (*CrdtTckModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _CrdtTckModel_Process_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessStreamed",
			Handler:       _CrdtTckModel_ProcessStreamed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tck_crdt2.proto",
}

// CrdtTwoClient is the client API for CrdtTwo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrdtTwoClient interface {
	Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type crdtTwoClient struct {
	cc grpc.ClientConnInterface
}

func NewCrdtTwoClient(cc grpc.ClientConnInterface) CrdtTwoClient {
	return &crdtTwoClient{cc}
}

func (c *crdtTwoClient) Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cloudstate.tck.model.crdt.CrdtTwo/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrdtTwoServer is the server API for CrdtTwo service.
// All implementations must embed UnimplementedCrdtTwoServer
// for forward compatibility
type CrdtTwoServer interface {
	Call(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedCrdtTwoServer()
}

// UnimplementedCrdtTwoServer must be embedded to have forward compatible implementations.
type UnimplementedCrdtTwoServer struct {
}

func (UnimplementedCrdtTwoServer) Call(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedCrdtTwoServer) mustEmbedUnimplementedCrdtTwoServer() {}

// UnsafeCrdtTwoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrdtTwoServer will
// result in compilation errors.
type UnsafeCrdtTwoServer interface {
	mustEmbedUnimplementedCrdtTwoServer()
}

func RegisterCrdtTwoServer(s *grpc.Server, srv CrdtTwoServer) {
	s.RegisterService(&_CrdtTwo_serviceDesc, srv)
}

func _CrdtTwo_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrdtTwoServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.tck.model.crdt.CrdtTwo/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrdtTwoServer).Call(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrdtTwo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.tck.model.crdt.CrdtTwo",
	HandlerType: (*CrdtTwoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _CrdtTwo_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tck_crdt2.proto",
}
