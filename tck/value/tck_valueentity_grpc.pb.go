// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package valueentity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ValueEntityTckModelClient is the client API for ValueEntityTckModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValueEntityTckModelClient interface {
	Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type valueEntityTckModelClient struct {
	cc grpc.ClientConnInterface
}

func NewValueEntityTckModelClient(cc grpc.ClientConnInterface) ValueEntityTckModelClient {
	return &valueEntityTckModelClient{cc}
}

func (c *valueEntityTckModelClient) Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cloudstate.tck.model.valueentity.ValueEntityTckModel/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValueEntityTckModelServer is the server API for ValueEntityTckModel service.
// All implementations must embed UnimplementedValueEntityTckModelServer
// for forward compatibility
type ValueEntityTckModelServer interface {
	Process(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedValueEntityTckModelServer()
}

// UnimplementedValueEntityTckModelServer must be embedded to have forward compatible implementations.
type UnimplementedValueEntityTckModelServer struct {
}

func (UnimplementedValueEntityTckModelServer) Process(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedValueEntityTckModelServer) mustEmbedUnimplementedValueEntityTckModelServer() {}

// UnsafeValueEntityTckModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValueEntityTckModelServer will
// result in compilation errors.
type UnsafeValueEntityTckModelServer interface {
	mustEmbedUnimplementedValueEntityTckModelServer()
}

func RegisterValueEntityTckModelServer(s grpc.ServiceRegistrar, srv ValueEntityTckModelServer) {
	s.RegisterService(&_ValueEntityTckModel_serviceDesc, srv)
}

func _ValueEntityTckModel_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValueEntityTckModelServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.tck.model.valueentity.ValueEntityTckModel/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValueEntityTckModelServer).Process(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValueEntityTckModel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.tck.model.valueentity.ValueEntityTckModel",
	HandlerType: (*ValueEntityTckModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _ValueEntityTckModel_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tck_valueentity.proto",
}

// ValueEntityTwoClient is the client API for ValueEntityTwo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValueEntityTwoClient interface {
	Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type valueEntityTwoClient struct {
	cc grpc.ClientConnInterface
}

func NewValueEntityTwoClient(cc grpc.ClientConnInterface) ValueEntityTwoClient {
	return &valueEntityTwoClient{cc}
}

func (c *valueEntityTwoClient) Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cloudstate.tck.model.valueentity.ValueEntityTwo/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValueEntityTwoServer is the server API for ValueEntityTwo service.
// All implementations must embed UnimplementedValueEntityTwoServer
// for forward compatibility
type ValueEntityTwoServer interface {
	Call(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedValueEntityTwoServer()
}

// UnimplementedValueEntityTwoServer must be embedded to have forward compatible implementations.
type UnimplementedValueEntityTwoServer struct {
}

func (UnimplementedValueEntityTwoServer) Call(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedValueEntityTwoServer) mustEmbedUnimplementedValueEntityTwoServer() {}

// UnsafeValueEntityTwoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValueEntityTwoServer will
// result in compilation errors.
type UnsafeValueEntityTwoServer interface {
	mustEmbedUnimplementedValueEntityTwoServer()
}

func RegisterValueEntityTwoServer(s grpc.ServiceRegistrar, srv ValueEntityTwoServer) {
	s.RegisterService(&_ValueEntityTwo_serviceDesc, srv)
}

func _ValueEntityTwo_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValueEntityTwoServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.tck.model.valueentity.ValueEntityTwo/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValueEntityTwoServer).Call(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValueEntityTwo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.tck.model.valueentity.ValueEntityTwo",
	HandlerType: (*ValueEntityTwoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _ValueEntityTwo_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tck_valueentity.proto",
}
