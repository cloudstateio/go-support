// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EntityDiscoveryClient is the client API for EntityDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityDiscoveryClient interface {
	// Discover what entities the user function wishes to serve.
	Discover(ctx context.Context, in *ProxyInfo, opts ...grpc.CallOption) (*EntitySpec, error)
	// Report an error back to the user function. This will only be invoked to tell the user function
	// that it has done something wrong, eg, violated the protocol, tried to use an entity type that
	// isn't supported, or attempted to forward to an entity that doesn't exist, etc. These messages
	// should be logged clearly for debugging purposes.
	ReportError(ctx context.Context, in *UserFunctionError, opts ...grpc.CallOption) (*empty.Empty, error)
}

type entityDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityDiscoveryClient(cc grpc.ClientConnInterface) EntityDiscoveryClient {
	return &entityDiscoveryClient{cc}
}

func (c *entityDiscoveryClient) Discover(ctx context.Context, in *ProxyInfo, opts ...grpc.CallOption) (*EntitySpec, error) {
	out := new(EntitySpec)
	err := c.cc.Invoke(ctx, "/cloudstate.EntityDiscovery/discover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityDiscoveryClient) ReportError(ctx context.Context, in *UserFunctionError, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloudstate.EntityDiscovery/reportError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityDiscoveryServer is the server API for EntityDiscovery service.
// All implementations must embed UnimplementedEntityDiscoveryServer
// for forward compatibility
type EntityDiscoveryServer interface {
	// Discover what entities the user function wishes to serve.
	Discover(context.Context, *ProxyInfo) (*EntitySpec, error)
	// Report an error back to the user function. This will only be invoked to tell the user function
	// that it has done something wrong, eg, violated the protocol, tried to use an entity type that
	// isn't supported, or attempted to forward to an entity that doesn't exist, etc. These messages
	// should be logged clearly for debugging purposes.
	ReportError(context.Context, *UserFunctionError) (*empty.Empty, error)
	mustEmbedUnimplementedEntityDiscoveryServer()
}

// UnimplementedEntityDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedEntityDiscoveryServer struct {
}

func (UnimplementedEntityDiscoveryServer) Discover(context.Context, *ProxyInfo) (*EntitySpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedEntityDiscoveryServer) ReportError(context.Context, *UserFunctionError) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportError not implemented")
}
func (UnimplementedEntityDiscoveryServer) mustEmbedUnimplementedEntityDiscoveryServer() {}

// UnsafeEntityDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityDiscoveryServer will
// result in compilation errors.
type UnsafeEntityDiscoveryServer interface {
	mustEmbedUnimplementedEntityDiscoveryServer()
}

func RegisterEntityDiscoveryServer(s *grpc.Server, srv EntityDiscoveryServer) {
	s.RegisterService(&_EntityDiscovery_serviceDesc, srv)
}

func _EntityDiscovery_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityDiscoveryServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.EntityDiscovery/discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityDiscoveryServer).Discover(ctx, req.(*ProxyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityDiscovery_ReportError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFunctionError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityDiscoveryServer).ReportError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.EntityDiscovery/reportError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityDiscoveryServer).ReportError(ctx, req.(*UserFunctionError))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityDiscovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.EntityDiscovery",
	HandlerType: (*EntityDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "discover",
			Handler:    _EntityDiscovery_Discover_Handler,
		},
		{
			MethodName: "reportError",
			Handler:    _EntityDiscovery_ReportError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entity.proto",
}
