// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// gRPC interface for Event Sourced Entity user functions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: event_sourced.proto

package entity

import (
	context "context"
	protocol "github.com/cloudstateio/go-support/cloudstate/protocol"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The init message. This will always be the first message sent to the entity when
// it is loaded.
type EventSourcedInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The ID of the entity.
	EntityId string `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// If present the entity should initialise its state using this snapshot.
	Snapshot *EventSourcedSnapshot `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *EventSourcedInit) Reset() {
	*x = EventSourcedInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_sourced_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSourcedInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSourcedInit) ProtoMessage() {}

func (x *EventSourcedInit) ProtoReflect() protoreflect.Message {
	mi := &file_event_sourced_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSourcedInit.ProtoReflect.Descriptor instead.
func (*EventSourcedInit) Descriptor() ([]byte, []int) {
	return file_event_sourced_proto_rawDescGZIP(), []int{0}
}

func (x *EventSourcedInit) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *EventSourcedInit) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EventSourcedInit) GetSnapshot() *EventSourcedSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

// A snapshot
type EventSourcedSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sequence number when the snapshot was taken.
	SnapshotSequence int64 `protobuf:"varint,1,opt,name=snapshot_sequence,json=snapshotSequence,proto3" json:"snapshot_sequence,omitempty"`
	// The snapshot.
	Snapshot *any.Any `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *EventSourcedSnapshot) Reset() {
	*x = EventSourcedSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_sourced_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSourcedSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSourcedSnapshot) ProtoMessage() {}

func (x *EventSourcedSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_event_sourced_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSourcedSnapshot.ProtoReflect.Descriptor instead.
func (*EventSourcedSnapshot) Descriptor() ([]byte, []int) {
	return file_event_sourced_proto_rawDescGZIP(), []int{1}
}

func (x *EventSourcedSnapshot) GetSnapshotSequence() int64 {
	if x != nil {
		return x.SnapshotSequence
	}
	return 0
}

func (x *EventSourcedSnapshot) GetSnapshot() *any.Any {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

// An event. These will be sent to the entity when the entity starts up.
type EventSourcedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sequence number of the event.
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The event payload.
	Payload *any.Any `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *EventSourcedEvent) Reset() {
	*x = EventSourcedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_sourced_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSourcedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSourcedEvent) ProtoMessage() {}

func (x *EventSourcedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_sourced_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSourcedEvent.ProtoReflect.Descriptor instead.
func (*EventSourcedEvent) Descriptor() ([]byte, []int) {
	return file_event_sourced_proto_rawDescGZIP(), []int{2}
}

func (x *EventSourcedEvent) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *EventSourcedEvent) GetPayload() *any.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

// A reply to a command.
type EventSourcedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the command being replied to. Must match the input command.
	CommandId int64 `protobuf:"varint,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// The action to take
	ClientAction *protocol.ClientAction `protobuf:"bytes,2,opt,name=client_action,json=clientAction,proto3" json:"client_action,omitempty"`
	// Any side effects to perform
	SideEffects []*protocol.SideEffect `protobuf:"bytes,3,rep,name=side_effects,json=sideEffects,proto3" json:"side_effects,omitempty"`
	// A list of events to persist - these will be persisted before the reply
	// is sent.
	Events []*any.Any `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	// An optional snapshot to persist. It is assumed that this snapshot will have
	// the state of any events in the events field applied to it. It is illegal to
	// send a snapshot without sending any events.
	Snapshot *any.Any `protobuf:"bytes,5,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *EventSourcedReply) Reset() {
	*x = EventSourcedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_sourced_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSourcedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSourcedReply) ProtoMessage() {}

func (x *EventSourcedReply) ProtoReflect() protoreflect.Message {
	mi := &file_event_sourced_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSourcedReply.ProtoReflect.Descriptor instead.
func (*EventSourcedReply) Descriptor() ([]byte, []int) {
	return file_event_sourced_proto_rawDescGZIP(), []int{3}
}

func (x *EventSourcedReply) GetCommandId() int64 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *EventSourcedReply) GetClientAction() *protocol.ClientAction {
	if x != nil {
		return x.ClientAction
	}
	return nil
}

func (x *EventSourcedReply) GetSideEffects() []*protocol.SideEffect {
	if x != nil {
		return x.SideEffects
	}
	return nil
}

func (x *EventSourcedReply) GetEvents() []*any.Any {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventSourcedReply) GetSnapshot() *any.Any {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

// Input message type for the gRPC stream in.
type EventSourcedStreamIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*EventSourcedStreamIn_Init
	//	*EventSourcedStreamIn_Event
	//	*EventSourcedStreamIn_Command
	Message isEventSourcedStreamIn_Message `protobuf_oneof:"message"`
}

func (x *EventSourcedStreamIn) Reset() {
	*x = EventSourcedStreamIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_sourced_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSourcedStreamIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSourcedStreamIn) ProtoMessage() {}

func (x *EventSourcedStreamIn) ProtoReflect() protoreflect.Message {
	mi := &file_event_sourced_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSourcedStreamIn.ProtoReflect.Descriptor instead.
func (*EventSourcedStreamIn) Descriptor() ([]byte, []int) {
	return file_event_sourced_proto_rawDescGZIP(), []int{4}
}

func (m *EventSourcedStreamIn) GetMessage() isEventSourcedStreamIn_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *EventSourcedStreamIn) GetInit() *EventSourcedInit {
	if x, ok := x.GetMessage().(*EventSourcedStreamIn_Init); ok {
		return x.Init
	}
	return nil
}

func (x *EventSourcedStreamIn) GetEvent() *EventSourcedEvent {
	if x, ok := x.GetMessage().(*EventSourcedStreamIn_Event); ok {
		return x.Event
	}
	return nil
}

func (x *EventSourcedStreamIn) GetCommand() *protocol.Command {
	if x, ok := x.GetMessage().(*EventSourcedStreamIn_Command); ok {
		return x.Command
	}
	return nil
}

type isEventSourcedStreamIn_Message interface {
	isEventSourcedStreamIn_Message()
}

type EventSourcedStreamIn_Init struct {
	Init *EventSourcedInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type EventSourcedStreamIn_Event struct {
	Event *EventSourcedEvent `protobuf:"bytes,2,opt,name=event,proto3,oneof"`
}

type EventSourcedStreamIn_Command struct {
	Command *protocol.Command `protobuf:"bytes,3,opt,name=command,proto3,oneof"`
}

func (*EventSourcedStreamIn_Init) isEventSourcedStreamIn_Message() {}

func (*EventSourcedStreamIn_Event) isEventSourcedStreamIn_Message() {}

func (*EventSourcedStreamIn_Command) isEventSourcedStreamIn_Message() {}

// Output message type for the gRPC stream out.
type EventSourcedStreamOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*EventSourcedStreamOut_Reply
	//	*EventSourcedStreamOut_Failure
	Message isEventSourcedStreamOut_Message `protobuf_oneof:"message"`
}

func (x *EventSourcedStreamOut) Reset() {
	*x = EventSourcedStreamOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_sourced_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSourcedStreamOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSourcedStreamOut) ProtoMessage() {}

func (x *EventSourcedStreamOut) ProtoReflect() protoreflect.Message {
	mi := &file_event_sourced_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSourcedStreamOut.ProtoReflect.Descriptor instead.
func (*EventSourcedStreamOut) Descriptor() ([]byte, []int) {
	return file_event_sourced_proto_rawDescGZIP(), []int{5}
}

func (m *EventSourcedStreamOut) GetMessage() isEventSourcedStreamOut_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *EventSourcedStreamOut) GetReply() *EventSourcedReply {
	if x, ok := x.GetMessage().(*EventSourcedStreamOut_Reply); ok {
		return x.Reply
	}
	return nil
}

func (x *EventSourcedStreamOut) GetFailure() *protocol.Failure {
	if x, ok := x.GetMessage().(*EventSourcedStreamOut_Failure); ok {
		return x.Failure
	}
	return nil
}

type isEventSourcedStreamOut_Message interface {
	isEventSourcedStreamOut_Message()
}

type EventSourcedStreamOut_Reply struct {
	Reply *EventSourcedReply `protobuf:"bytes,1,opt,name=reply,proto3,oneof"`
}

type EventSourcedStreamOut_Failure struct {
	Failure *protocol.Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*EventSourcedStreamOut_Reply) isEventSourcedStreamOut_Message() {}

func (*EventSourcedStreamOut_Failure) isEventSourcedStreamOut_Message() {}

var File_event_sourced_proto protoreflect.FileDescriptor

var file_event_sourced_proto_rawDesc = []byte{
	0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0x75, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x5f, 0x0a, 0x11, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x11, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x69,
	0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x75, 0x74, 0x12, 0x42, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x7d, 0x0a,
	0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x12, 0x6d, 0x0a,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x55, 0x0a, 0x16,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x69, 0x6f, 0x2f,
	0x67, 0x6f, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_sourced_proto_rawDescOnce sync.Once
	file_event_sourced_proto_rawDescData = file_event_sourced_proto_rawDesc
)

func file_event_sourced_proto_rawDescGZIP() []byte {
	file_event_sourced_proto_rawDescOnce.Do(func() {
		file_event_sourced_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_sourced_proto_rawDescData)
	})
	return file_event_sourced_proto_rawDescData
}

var file_event_sourced_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_event_sourced_proto_goTypes = []interface{}{
	(*EventSourcedInit)(nil),      // 0: cloudstate.eventsourced.EventSourcedInit
	(*EventSourcedSnapshot)(nil),  // 1: cloudstate.eventsourced.EventSourcedSnapshot
	(*EventSourcedEvent)(nil),     // 2: cloudstate.eventsourced.EventSourcedEvent
	(*EventSourcedReply)(nil),     // 3: cloudstate.eventsourced.EventSourcedReply
	(*EventSourcedStreamIn)(nil),  // 4: cloudstate.eventsourced.EventSourcedStreamIn
	(*EventSourcedStreamOut)(nil), // 5: cloudstate.eventsourced.EventSourcedStreamOut
	(*any.Any)(nil),               // 6: google.protobuf.Any
	(*protocol.ClientAction)(nil), // 7: cloudstate.ClientAction
	(*protocol.SideEffect)(nil),   // 8: cloudstate.SideEffect
	(*protocol.Command)(nil),      // 9: cloudstate.Command
	(*protocol.Failure)(nil),      // 10: cloudstate.Failure
}
var file_event_sourced_proto_depIdxs = []int32{
	1,  // 0: cloudstate.eventsourced.EventSourcedInit.snapshot:type_name -> cloudstate.eventsourced.EventSourcedSnapshot
	6,  // 1: cloudstate.eventsourced.EventSourcedSnapshot.snapshot:type_name -> google.protobuf.Any
	6,  // 2: cloudstate.eventsourced.EventSourcedEvent.payload:type_name -> google.protobuf.Any
	7,  // 3: cloudstate.eventsourced.EventSourcedReply.client_action:type_name -> cloudstate.ClientAction
	8,  // 4: cloudstate.eventsourced.EventSourcedReply.side_effects:type_name -> cloudstate.SideEffect
	6,  // 5: cloudstate.eventsourced.EventSourcedReply.events:type_name -> google.protobuf.Any
	6,  // 6: cloudstate.eventsourced.EventSourcedReply.snapshot:type_name -> google.protobuf.Any
	0,  // 7: cloudstate.eventsourced.EventSourcedStreamIn.init:type_name -> cloudstate.eventsourced.EventSourcedInit
	2,  // 8: cloudstate.eventsourced.EventSourcedStreamIn.event:type_name -> cloudstate.eventsourced.EventSourcedEvent
	9,  // 9: cloudstate.eventsourced.EventSourcedStreamIn.command:type_name -> cloudstate.Command
	3,  // 10: cloudstate.eventsourced.EventSourcedStreamOut.reply:type_name -> cloudstate.eventsourced.EventSourcedReply
	10, // 11: cloudstate.eventsourced.EventSourcedStreamOut.failure:type_name -> cloudstate.Failure
	4,  // 12: cloudstate.eventsourced.EventSourced.handle:input_type -> cloudstate.eventsourced.EventSourcedStreamIn
	5,  // 13: cloudstate.eventsourced.EventSourced.handle:output_type -> cloudstate.eventsourced.EventSourcedStreamOut
	13, // [13:14] is the sub-list for method output_type
	12, // [12:13] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_event_sourced_proto_init() }
func file_event_sourced_proto_init() {
	if File_event_sourced_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_sourced_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSourcedInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_sourced_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSourcedSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_sourced_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSourcedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_sourced_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSourcedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_sourced_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSourcedStreamIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_sourced_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSourcedStreamOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_event_sourced_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*EventSourcedStreamIn_Init)(nil),
		(*EventSourcedStreamIn_Event)(nil),
		(*EventSourcedStreamIn_Command)(nil),
	}
	file_event_sourced_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*EventSourcedStreamOut_Reply)(nil),
		(*EventSourcedStreamOut_Failure)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_sourced_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_sourced_proto_goTypes,
		DependencyIndexes: file_event_sourced_proto_depIdxs,
		MessageInfos:      file_event_sourced_proto_msgTypes,
	}.Build()
	File_event_sourced_proto = out.File
	file_event_sourced_proto_rawDesc = nil
	file_event_sourced_proto_goTypes = nil
	file_event_sourced_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventSourcedClient is the client API for EventSourced service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventSourcedClient interface {
	// The stream. One stream will be established per active entity.
	// Once established, the first message sent will be Init, which contains the entity ID, and,
	// if the entity has previously persisted a snapshot, it will contain that snapshot. It will
	// then send zero to many event messages, one for each event previously persisted. The entity
	// is expected to apply these to its state in a deterministic fashion. Once all the events
	// are sent, one to many commands are sent, with new commands being sent as new requests for
	// the entity come in. The entity is expected to reply to each command with exactly one reply
	// message. The entity should reply in order, and any events that the entity requests to be
	// persisted the entity should handle itself, applying them to its own state, as if they had
	// arrived as events when the event stream was being replayed on load.
	Handle(ctx context.Context, opts ...grpc.CallOption) (EventSourced_HandleClient, error)
}

type eventSourcedClient struct {
	cc grpc.ClientConnInterface
}

func NewEventSourcedClient(cc grpc.ClientConnInterface) EventSourcedClient {
	return &eventSourcedClient{cc}
}

func (c *eventSourcedClient) Handle(ctx context.Context, opts ...grpc.CallOption) (EventSourced_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventSourced_serviceDesc.Streams[0], "/cloudstate.eventsourced.EventSourced/handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventSourcedHandleClient{stream}
	return x, nil
}

type EventSourced_HandleClient interface {
	Send(*EventSourcedStreamIn) error
	Recv() (*EventSourcedStreamOut, error)
	grpc.ClientStream
}

type eventSourcedHandleClient struct {
	grpc.ClientStream
}

func (x *eventSourcedHandleClient) Send(m *EventSourcedStreamIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventSourcedHandleClient) Recv() (*EventSourcedStreamOut, error) {
	m := new(EventSourcedStreamOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventSourcedServer is the server API for EventSourced service.
type EventSourcedServer interface {
	// The stream. One stream will be established per active entity.
	// Once established, the first message sent will be Init, which contains the entity ID, and,
	// if the entity has previously persisted a snapshot, it will contain that snapshot. It will
	// then send zero to many event messages, one for each event previously persisted. The entity
	// is expected to apply these to its state in a deterministic fashion. Once all the events
	// are sent, one to many commands are sent, with new commands being sent as new requests for
	// the entity come in. The entity is expected to reply to each command with exactly one reply
	// message. The entity should reply in order, and any events that the entity requests to be
	// persisted the entity should handle itself, applying them to its own state, as if they had
	// arrived as events when the event stream was being replayed on load.
	Handle(EventSourced_HandleServer) error
}

// UnimplementedEventSourcedServer can be embedded to have forward compatible implementations.
type UnimplementedEventSourcedServer struct {
}

func (*UnimplementedEventSourcedServer) Handle(EventSourced_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}

func RegisterEventSourcedServer(s *grpc.Server, srv EventSourcedServer) {
	s.RegisterService(&_EventSourced_serviceDesc, srv)
}

func _EventSourced_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventSourcedServer).Handle(&eventSourcedHandleServer{stream})
}

type EventSourced_HandleServer interface {
	Send(*EventSourcedStreamOut) error
	Recv() (*EventSourcedStreamIn, error)
	grpc.ServerStream
}

type eventSourcedHandleServer struct {
	grpc.ServerStream
}

func (x *eventSourcedHandleServer) Send(m *EventSourcedStreamOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventSourcedHandleServer) Recv() (*EventSourcedStreamIn, error) {
	m := new(EventSourcedStreamIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventSourced_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.eventsourced.EventSourced",
	HandlerType: (*EventSourcedServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "handle",
			Handler:       _EventSourced_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "event_sourced.proto",
}
