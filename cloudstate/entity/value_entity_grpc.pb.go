// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ValueEntityClient is the client API for ValueEntity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValueEntityClient interface {
	// One stream will be established per active entity.
	// Once established, the first message sent will be Init, which contains the entity ID, and,
	// a state if the entity has previously persisted one. Once the Init message is sent, one to
	// many commands are sent to the entity. Each request coming in leads to a new command being sent
	// to the entity. The entity is expected to reply to each command with exactly one reply message.
	// The entity should process commands and reply to commands in the order they came
	// in. When processing a command the entity can read and persist (update or delete) the state.
	Handle(ctx context.Context, opts ...grpc.CallOption) (ValueEntity_HandleClient, error)
}

type valueEntityClient struct {
	cc grpc.ClientConnInterface
}

func NewValueEntityClient(cc grpc.ClientConnInterface) ValueEntityClient {
	return &valueEntityClient{cc}
}

func (c *valueEntityClient) Handle(ctx context.Context, opts ...grpc.CallOption) (ValueEntity_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ValueEntity_serviceDesc.Streams[0], "/cloudstate.valueentity.ValueEntity/handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &valueEntityHandleClient{stream}
	return x, nil
}

type ValueEntity_HandleClient interface {
	Send(*ValueEntityStreamIn) error
	Recv() (*ValueEntityStreamOut, error)
	grpc.ClientStream
}

type valueEntityHandleClient struct {
	grpc.ClientStream
}

func (x *valueEntityHandleClient) Send(m *ValueEntityStreamIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *valueEntityHandleClient) Recv() (*ValueEntityStreamOut, error) {
	m := new(ValueEntityStreamOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValueEntityServer is the server API for ValueEntity service.
// All implementations must embed UnimplementedValueEntityServer
// for forward compatibility
type ValueEntityServer interface {
	// One stream will be established per active entity.
	// Once established, the first message sent will be Init, which contains the entity ID, and,
	// a state if the entity has previously persisted one. Once the Init message is sent, one to
	// many commands are sent to the entity. Each request coming in leads to a new command being sent
	// to the entity. The entity is expected to reply to each command with exactly one reply message.
	// The entity should process commands and reply to commands in the order they came
	// in. When processing a command the entity can read and persist (update or delete) the state.
	Handle(ValueEntity_HandleServer) error
	mustEmbedUnimplementedValueEntityServer()
}

// UnimplementedValueEntityServer must be embedded to have forward compatible implementations.
type UnimplementedValueEntityServer struct {
}

func (UnimplementedValueEntityServer) Handle(ValueEntity_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedValueEntityServer) mustEmbedUnimplementedValueEntityServer() {}

// UnsafeValueEntityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValueEntityServer will
// result in compilation errors.
type UnsafeValueEntityServer interface {
	mustEmbedUnimplementedValueEntityServer()
}

func RegisterValueEntityServer(s *grpc.Server, srv ValueEntityServer) {
	s.RegisterService(&_ValueEntity_serviceDesc, srv)
}

func _ValueEntity_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValueEntityServer).Handle(&valueEntityHandleServer{stream})
}

type ValueEntity_HandleServer interface {
	Send(*ValueEntityStreamOut) error
	Recv() (*ValueEntityStreamIn, error)
	grpc.ServerStream
}

type valueEntityHandleServer struct {
	grpc.ServerStream
}

func (x *valueEntityHandleServer) Send(m *ValueEntityStreamOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *valueEntityHandleServer) Recv() (*ValueEntityStreamIn, error) {
	m := new(ValueEntityStreamIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ValueEntity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.valueentity.ValueEntity",
	HandlerType: (*ValueEntityServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "handle",
			Handler:       _ValueEntity_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "value_entity.proto",
}
