// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// gRPC interface for CRDT Entity user functions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.2
// source: crdt.proto

package entity

import (
	protocol "github.com/cloudstateio/go-support/cloudstate/protocol"
	any "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CrdtWriteConsistency int32

const (
	CrdtWriteConsistency_LOCAL    CrdtWriteConsistency = 0
	CrdtWriteConsistency_MAJORITY CrdtWriteConsistency = 1
	CrdtWriteConsistency_ALL      CrdtWriteConsistency = 2
)

// Enum value maps for CrdtWriteConsistency.
var (
	CrdtWriteConsistency_name = map[int32]string{
		0: "LOCAL",
		1: "MAJORITY",
		2: "ALL",
	}
	CrdtWriteConsistency_value = map[string]int32{
		"LOCAL":    0,
		"MAJORITY": 1,
		"ALL":      2,
	}
)

func (x CrdtWriteConsistency) Enum() *CrdtWriteConsistency {
	p := new(CrdtWriteConsistency)
	*p = x
	return p
}

func (x CrdtWriteConsistency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrdtWriteConsistency) Descriptor() protoreflect.EnumDescriptor {
	return file_crdt_proto_enumTypes[0].Descriptor()
}

func (CrdtWriteConsistency) Type() protoreflect.EnumType {
	return &file_crdt_proto_enumTypes[0]
}

func (x CrdtWriteConsistency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrdtWriteConsistency.Descriptor instead.
func (CrdtWriteConsistency) EnumDescriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{0}
}

type CrdtClock int32

const (
	// Use the default clock for deciding the last write, which is the system clocks
	// milliseconds since epoch.
	CrdtClock_DEFAULT CrdtClock = 0
	// Use the reverse semantics with the default clock, to enable first write wins.
	CrdtClock_REVERSE CrdtClock = 1
	// Use a custom clock value, set using custom_clock_value.
	CrdtClock_CUSTOM CrdtClock = 2
	// Use a custom clock value, but automatically increment it by one if the clock
	// value from the current value is equal to the custom_clock_value.
	CrdtClock_CUSTOM_AUTO_INCREMENT CrdtClock = 3
)

// Enum value maps for CrdtClock.
var (
	CrdtClock_name = map[int32]string{
		0: "DEFAULT",
		1: "REVERSE",
		2: "CUSTOM",
		3: "CUSTOM_AUTO_INCREMENT",
	}
	CrdtClock_value = map[string]int32{
		"DEFAULT":               0,
		"REVERSE":               1,
		"CUSTOM":                2,
		"CUSTOM_AUTO_INCREMENT": 3,
	}
)

func (x CrdtClock) Enum() *CrdtClock {
	p := new(CrdtClock)
	*p = x
	return p
}

func (x CrdtClock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrdtClock) Descriptor() protoreflect.EnumDescriptor {
	return file_crdt_proto_enumTypes[1].Descriptor()
}

func (CrdtClock) Type() protoreflect.EnumType {
	return &file_crdt_proto_enumTypes[1]
}

func (x CrdtClock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrdtClock.Descriptor instead.
func (CrdtClock) EnumDescriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{1}
}

// Message for the Crdt handle stream in.
type CrdtStreamIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*CrdtStreamIn_Init
	//	*CrdtStreamIn_State
	//	*CrdtStreamIn_Changed
	//	*CrdtStreamIn_Deleted
	//	*CrdtStreamIn_Command
	//	*CrdtStreamIn_StreamCancelled
	Message isCrdtStreamIn_Message `protobuf_oneof:"message"`
}

func (x *CrdtStreamIn) Reset() {
	*x = CrdtStreamIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtStreamIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtStreamIn) ProtoMessage() {}

func (x *CrdtStreamIn) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtStreamIn.ProtoReflect.Descriptor instead.
func (*CrdtStreamIn) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{0}
}

func (m *CrdtStreamIn) GetMessage() isCrdtStreamIn_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *CrdtStreamIn) GetInit() *CrdtInit {
	if x, ok := x.GetMessage().(*CrdtStreamIn_Init); ok {
		return x.Init
	}
	return nil
}

func (x *CrdtStreamIn) GetState() *CrdtState {
	if x, ok := x.GetMessage().(*CrdtStreamIn_State); ok {
		return x.State
	}
	return nil
}

func (x *CrdtStreamIn) GetChanged() *CrdtDelta {
	if x, ok := x.GetMessage().(*CrdtStreamIn_Changed); ok {
		return x.Changed
	}
	return nil
}

func (x *CrdtStreamIn) GetDeleted() *CrdtDelete {
	if x, ok := x.GetMessage().(*CrdtStreamIn_Deleted); ok {
		return x.Deleted
	}
	return nil
}

func (x *CrdtStreamIn) GetCommand() *protocol.Command {
	if x, ok := x.GetMessage().(*CrdtStreamIn_Command); ok {
		return x.Command
	}
	return nil
}

func (x *CrdtStreamIn) GetStreamCancelled() *protocol.StreamCancelled {
	if x, ok := x.GetMessage().(*CrdtStreamIn_StreamCancelled); ok {
		return x.StreamCancelled
	}
	return nil
}

type isCrdtStreamIn_Message interface {
	isCrdtStreamIn_Message()
}

type CrdtStreamIn_Init struct {
	// Always sent first, and only once.
	Init *CrdtInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type CrdtStreamIn_State struct {
	// Sent to indicate the user function should replace its current state with this state. If the user function
	// does not have a current state, either because the init function didn't send one and the user function hasn't
	// updated the state itself in response to a command, or because the state was deleted, this must be sent before
	// any deltas.
	State *CrdtState `protobuf:"bytes,2,opt,name=state,proto3,oneof"`
}

type CrdtStreamIn_Changed struct {
	// A delta to be applied to the current state. May be sent at any time as long as the user function already has
	// state.
	Changed *CrdtDelta `protobuf:"bytes,3,opt,name=changed,proto3,oneof"`
}

type CrdtStreamIn_Deleted struct {
	// Delete the entity. May be sent at any time. The user function should clear its state when it receives this.
	// A proxy may decide to terminate the stream after sending this.
	Deleted *CrdtDelete `protobuf:"bytes,4,opt,name=deleted,proto3,oneof"`
}

type CrdtStreamIn_Command struct {
	// A command, may be sent at any time.
	Command *protocol.Command `protobuf:"bytes,5,opt,name=command,proto3,oneof"`
}

type CrdtStreamIn_StreamCancelled struct {
	// A stream has been cancelled.
	StreamCancelled *protocol.StreamCancelled `protobuf:"bytes,6,opt,name=stream_cancelled,json=streamCancelled,proto3,oneof"`
}

func (*CrdtStreamIn_Init) isCrdtStreamIn_Message() {}

func (*CrdtStreamIn_State) isCrdtStreamIn_Message() {}

func (*CrdtStreamIn_Changed) isCrdtStreamIn_Message() {}

func (*CrdtStreamIn_Deleted) isCrdtStreamIn_Message() {}

func (*CrdtStreamIn_Command) isCrdtStreamIn_Message() {}

func (*CrdtStreamIn_StreamCancelled) isCrdtStreamIn_Message() {}

// Message for the Crdt handle stream out.
type CrdtStreamOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*CrdtStreamOut_Reply
	//	*CrdtStreamOut_StreamedMessage
	//	*CrdtStreamOut_StreamCancelledResponse
	//	*CrdtStreamOut_Failure
	Message isCrdtStreamOut_Message `protobuf_oneof:"message"`
}

func (x *CrdtStreamOut) Reset() {
	*x = CrdtStreamOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtStreamOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtStreamOut) ProtoMessage() {}

func (x *CrdtStreamOut) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtStreamOut.ProtoReflect.Descriptor instead.
func (*CrdtStreamOut) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{1}
}

func (m *CrdtStreamOut) GetMessage() isCrdtStreamOut_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *CrdtStreamOut) GetReply() *CrdtReply {
	if x, ok := x.GetMessage().(*CrdtStreamOut_Reply); ok {
		return x.Reply
	}
	return nil
}

func (x *CrdtStreamOut) GetStreamedMessage() *CrdtStreamedMessage {
	if x, ok := x.GetMessage().(*CrdtStreamOut_StreamedMessage); ok {
		return x.StreamedMessage
	}
	return nil
}

func (x *CrdtStreamOut) GetStreamCancelledResponse() *CrdtStreamCancelledResponse {
	if x, ok := x.GetMessage().(*CrdtStreamOut_StreamCancelledResponse); ok {
		return x.StreamCancelledResponse
	}
	return nil
}

func (x *CrdtStreamOut) GetFailure() *protocol.Failure {
	if x, ok := x.GetMessage().(*CrdtStreamOut_Failure); ok {
		return x.Failure
	}
	return nil
}

type isCrdtStreamOut_Message interface {
	isCrdtStreamOut_Message()
}

type CrdtStreamOut_Reply struct {
	// A reply to an incoming command. Either one reply, or one failure, must be sent in response to each command.
	Reply *CrdtReply `protobuf:"bytes,1,opt,name=reply,proto3,oneof"`
}

type CrdtStreamOut_StreamedMessage struct {
	// A streamed message.
	StreamedMessage *CrdtStreamedMessage `protobuf:"bytes,2,opt,name=streamed_message,json=streamedMessage,proto3,oneof"`
}

type CrdtStreamOut_StreamCancelledResponse struct {
	// A stream cancelled response, may be sent in response to stream_cancelled.
	StreamCancelledResponse *CrdtStreamCancelledResponse `protobuf:"bytes,3,opt,name=stream_cancelled_response,json=streamCancelledResponse,proto3,oneof"`
}

type CrdtStreamOut_Failure struct {
	// A failure. Either sent in response to a command, or sent if some other error occurs.
	Failure *protocol.Failure `protobuf:"bytes,4,opt,name=failure,proto3,oneof"`
}

func (*CrdtStreamOut_Reply) isCrdtStreamOut_Message() {}

func (*CrdtStreamOut_StreamedMessage) isCrdtStreamOut_Message() {}

func (*CrdtStreamOut_StreamCancelledResponse) isCrdtStreamOut_Message() {}

func (*CrdtStreamOut_Failure) isCrdtStreamOut_Message() {}

// The CRDT state. This represents the full state of a CRDT. When received, a user function should replace the current
// state with this, not apply it as a delta. This includes both for the top level CRDT, and embedded CRDTs, such as
// the values of an ORMap.
type CrdtState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to State:
	//	*CrdtState_Gcounter
	//	*CrdtState_Pncounter
	//	*CrdtState_Gset
	//	*CrdtState_Orset
	//	*CrdtState_Lwwregister
	//	*CrdtState_Flag
	//	*CrdtState_Ormap
	//	*CrdtState_Vote
	State isCrdtState_State `protobuf_oneof:"state"`
}

func (x *CrdtState) Reset() {
	*x = CrdtState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtState) ProtoMessage() {}

func (x *CrdtState) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtState.ProtoReflect.Descriptor instead.
func (*CrdtState) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{2}
}

func (m *CrdtState) GetState() isCrdtState_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *CrdtState) GetGcounter() *GCounterState {
	if x, ok := x.GetState().(*CrdtState_Gcounter); ok {
		return x.Gcounter
	}
	return nil
}

func (x *CrdtState) GetPncounter() *PNCounterState {
	if x, ok := x.GetState().(*CrdtState_Pncounter); ok {
		return x.Pncounter
	}
	return nil
}

func (x *CrdtState) GetGset() *GSetState {
	if x, ok := x.GetState().(*CrdtState_Gset); ok {
		return x.Gset
	}
	return nil
}

func (x *CrdtState) GetOrset() *ORSetState {
	if x, ok := x.GetState().(*CrdtState_Orset); ok {
		return x.Orset
	}
	return nil
}

func (x *CrdtState) GetLwwregister() *LWWRegisterState {
	if x, ok := x.GetState().(*CrdtState_Lwwregister); ok {
		return x.Lwwregister
	}
	return nil
}

func (x *CrdtState) GetFlag() *FlagState {
	if x, ok := x.GetState().(*CrdtState_Flag); ok {
		return x.Flag
	}
	return nil
}

func (x *CrdtState) GetOrmap() *ORMapState {
	if x, ok := x.GetState().(*CrdtState_Ormap); ok {
		return x.Ormap
	}
	return nil
}

func (x *CrdtState) GetVote() *VoteState {
	if x, ok := x.GetState().(*CrdtState_Vote); ok {
		return x.Vote
	}
	return nil
}

type isCrdtState_State interface {
	isCrdtState_State()
}

type CrdtState_Gcounter struct {
	// A Grow-only Counter
	Gcounter *GCounterState `protobuf:"bytes,1,opt,name=gcounter,proto3,oneof"`
}

type CrdtState_Pncounter struct {
	// A Positve-Negative Counter
	Pncounter *PNCounterState `protobuf:"bytes,2,opt,name=pncounter,proto3,oneof"`
}

type CrdtState_Gset struct {
	// A Grow-only Set
	Gset *GSetState `protobuf:"bytes,3,opt,name=gset,proto3,oneof"`
}

type CrdtState_Orset struct {
	// An Observed-Removed Set
	Orset *ORSetState `protobuf:"bytes,4,opt,name=orset,proto3,oneof"`
}

type CrdtState_Lwwregister struct {
	// A Last-Write-Wins Register
	Lwwregister *LWWRegisterState `protobuf:"bytes,5,opt,name=lwwregister,proto3,oneof"`
}

type CrdtState_Flag struct {
	// A Flag
	Flag *FlagState `protobuf:"bytes,6,opt,name=flag,proto3,oneof"`
}

type CrdtState_Ormap struct {
	// An Observed-Removed Map
	Ormap *ORMapState `protobuf:"bytes,7,opt,name=ormap,proto3,oneof"`
}

type CrdtState_Vote struct {
	// A vote
	Vote *VoteState `protobuf:"bytes,8,opt,name=vote,proto3,oneof"`
}

func (*CrdtState_Gcounter) isCrdtState_State() {}

func (*CrdtState_Pncounter) isCrdtState_State() {}

func (*CrdtState_Gset) isCrdtState_State() {}

func (*CrdtState_Orset) isCrdtState_State() {}

func (*CrdtState_Lwwregister) isCrdtState_State() {}

func (*CrdtState_Flag) isCrdtState_State() {}

func (*CrdtState_Ormap) isCrdtState_State() {}

func (*CrdtState_Vote) isCrdtState_State() {}

// A Grow-only counter
//
// A G-Counter can only be incremented, it can't be decremented.
type GCounterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current value of the counter.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GCounterState) Reset() {
	*x = GCounterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCounterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCounterState) ProtoMessage() {}

func (x *GCounterState) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCounterState.ProtoReflect.Descriptor instead.
func (*GCounterState) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{3}
}

func (x *GCounterState) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A Positve-Negative Counter
//
// A PN-Counter can be both incremented and decremented.
type PNCounterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current value of the counter.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PNCounterState) Reset() {
	*x = PNCounterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNCounterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNCounterState) ProtoMessage() {}

func (x *PNCounterState) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNCounterState.ProtoReflect.Descriptor instead.
func (*PNCounterState) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{4}
}

func (x *PNCounterState) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A Grow-only Set
//
// A G-Set can only have items added, items cannot be removed.
type GSetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current items in the set.
	Items []*any.Any `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GSetState) Reset() {
	*x = GSetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSetState) ProtoMessage() {}

func (x *GSetState) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSetState.ProtoReflect.Descriptor instead.
func (*GSetState) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{5}
}

func (x *GSetState) GetItems() []*any.Any {
	if x != nil {
		return x.Items
	}
	return nil
}

// An Observed-Removed Set
//
// An OR-Set may have items added and removed, with the condition that an item must be observed to be in the set before
// it is removed.
type ORSetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current items in the set.
	Items []*any.Any `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ORSetState) Reset() {
	*x = ORSetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORSetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORSetState) ProtoMessage() {}

func (x *ORSetState) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORSetState.ProtoReflect.Descriptor instead.
func (*ORSetState) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{6}
}

func (x *ORSetState) GetItems() []*any.Any {
	if x != nil {
		return x.Items
	}
	return nil
}

// A Last-Write-Wins Register
//
// A LWW-Register holds a single value, with the current value being selected based on when it was last written.
// The time of the last write may either be determined using the proxies clock, or may be based on a custom, domain
// specific value.
type LWWRegisterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current value of the register.
	Value *any.Any `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The clock to use if this state needs to be merged with another one.
	Clock CrdtClock `protobuf:"varint,2,opt,name=clock,proto3,enum=cloudstate.crdt.CrdtClock" json:"clock,omitempty"`
	// The clock value if the clock in use is a custom clock.
	CustomClockValue int64 `protobuf:"varint,3,opt,name=custom_clock_value,json=customClockValue,proto3" json:"custom_clock_value,omitempty"`
}

func (x *LWWRegisterState) Reset() {
	*x = LWWRegisterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWWRegisterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWWRegisterState) ProtoMessage() {}

func (x *LWWRegisterState) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWWRegisterState.ProtoReflect.Descriptor instead.
func (*LWWRegisterState) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{7}
}

func (x *LWWRegisterState) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LWWRegisterState) GetClock() CrdtClock {
	if x != nil {
		return x.Clock
	}
	return CrdtClock_DEFAULT
}

func (x *LWWRegisterState) GetCustomClockValue() int64 {
	if x != nil {
		return x.CustomClockValue
	}
	return 0
}

// A Flag
//
// A Flag is a boolean value, that once set to true, stays true.
type FlagState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current value of the flag.
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FlagState) Reset() {
	*x = FlagState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagState) ProtoMessage() {}

func (x *FlagState) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagState.ProtoReflect.Descriptor instead.
func (*FlagState) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{8}
}

func (x *FlagState) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

// An Observed-Removed Map
//
// Like an OR-Set, an OR-Map may have items added and removed, with the condition that an item must be observed to be
// in the map before it is removed. The values of the map are CRDTs themselves. Different keys are allowed to use
// different CRDTs, and if an item is removed, and then replaced, the new value may be a different CRDT.
type ORMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entries of the map.
	Entries []*ORMapEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ORMapState) Reset() {
	*x = ORMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapState) ProtoMessage() {}

func (x *ORMapState) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapState.ProtoReflect.Descriptor instead.
func (*ORMapState) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{9}
}

func (x *ORMapState) GetEntries() []*ORMapEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// An OR-Map entry.
type ORMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entry key.
	Key *any.Any `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the entry, a CRDT itself.
	Value *CrdtState `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ORMapEntry) Reset() {
	*x = ORMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapEntry) ProtoMessage() {}

func (x *ORMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapEntry.ProtoReflect.Descriptor instead.
func (*ORMapEntry) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{10}
}

func (x *ORMapEntry) GetKey() *any.Any {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ORMapEntry) GetValue() *CrdtState {
	if x != nil {
		return x.Value
	}
	return nil
}

// A Vote. This allows nodes to vote on something.
type VoteState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of votes for
	VotesFor uint32 `protobuf:"varint,1,opt,name=votes_for,json=votesFor,proto3" json:"votes_for,omitempty"`
	// The total number of voters
	TotalVoters uint32 `protobuf:"varint,2,opt,name=total_voters,json=totalVoters,proto3" json:"total_voters,omitempty"`
	// The vote of the current node, which is included in the above two numbers
	SelfVote bool `protobuf:"varint,3,opt,name=self_vote,json=selfVote,proto3" json:"self_vote,omitempty"`
}

func (x *VoteState) Reset() {
	*x = VoteState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteState) ProtoMessage() {}

func (x *VoteState) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteState.ProtoReflect.Descriptor instead.
func (*VoteState) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{11}
}

func (x *VoteState) GetVotesFor() uint32 {
	if x != nil {
		return x.VotesFor
	}
	return 0
}

func (x *VoteState) GetTotalVoters() uint32 {
	if x != nil {
		return x.TotalVoters
	}
	return 0
}

func (x *VoteState) GetSelfVote() bool {
	if x != nil {
		return x.SelfVote
	}
	return false
}

// A CRDT delta
//
// Deltas only carry the change in value, not the full value (unless
type CrdtDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Delta:
	//	*CrdtDelta_Gcounter
	//	*CrdtDelta_Pncounter
	//	*CrdtDelta_Gset
	//	*CrdtDelta_Orset
	//	*CrdtDelta_Lwwregister
	//	*CrdtDelta_Flag
	//	*CrdtDelta_Ormap
	//	*CrdtDelta_Vote
	Delta isCrdtDelta_Delta `protobuf_oneof:"delta"`
}

func (x *CrdtDelta) Reset() {
	*x = CrdtDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtDelta) ProtoMessage() {}

func (x *CrdtDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtDelta.ProtoReflect.Descriptor instead.
func (*CrdtDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{12}
}

func (m *CrdtDelta) GetDelta() isCrdtDelta_Delta {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (x *CrdtDelta) GetGcounter() *GCounterDelta {
	if x, ok := x.GetDelta().(*CrdtDelta_Gcounter); ok {
		return x.Gcounter
	}
	return nil
}

func (x *CrdtDelta) GetPncounter() *PNCounterDelta {
	if x, ok := x.GetDelta().(*CrdtDelta_Pncounter); ok {
		return x.Pncounter
	}
	return nil
}

func (x *CrdtDelta) GetGset() *GSetDelta {
	if x, ok := x.GetDelta().(*CrdtDelta_Gset); ok {
		return x.Gset
	}
	return nil
}

func (x *CrdtDelta) GetOrset() *ORSetDelta {
	if x, ok := x.GetDelta().(*CrdtDelta_Orset); ok {
		return x.Orset
	}
	return nil
}

func (x *CrdtDelta) GetLwwregister() *LWWRegisterDelta {
	if x, ok := x.GetDelta().(*CrdtDelta_Lwwregister); ok {
		return x.Lwwregister
	}
	return nil
}

func (x *CrdtDelta) GetFlag() *FlagDelta {
	if x, ok := x.GetDelta().(*CrdtDelta_Flag); ok {
		return x.Flag
	}
	return nil
}

func (x *CrdtDelta) GetOrmap() *ORMapDelta {
	if x, ok := x.GetDelta().(*CrdtDelta_Ormap); ok {
		return x.Ormap
	}
	return nil
}

func (x *CrdtDelta) GetVote() *VoteDelta {
	if x, ok := x.GetDelta().(*CrdtDelta_Vote); ok {
		return x.Vote
	}
	return nil
}

type isCrdtDelta_Delta interface {
	isCrdtDelta_Delta()
}

type CrdtDelta_Gcounter struct {
	Gcounter *GCounterDelta `protobuf:"bytes,1,opt,name=gcounter,proto3,oneof"`
}

type CrdtDelta_Pncounter struct {
	Pncounter *PNCounterDelta `protobuf:"bytes,2,opt,name=pncounter,proto3,oneof"`
}

type CrdtDelta_Gset struct {
	Gset *GSetDelta `protobuf:"bytes,3,opt,name=gset,proto3,oneof"`
}

type CrdtDelta_Orset struct {
	Orset *ORSetDelta `protobuf:"bytes,4,opt,name=orset,proto3,oneof"`
}

type CrdtDelta_Lwwregister struct {
	Lwwregister *LWWRegisterDelta `protobuf:"bytes,5,opt,name=lwwregister,proto3,oneof"`
}

type CrdtDelta_Flag struct {
	Flag *FlagDelta `protobuf:"bytes,6,opt,name=flag,proto3,oneof"`
}

type CrdtDelta_Ormap struct {
	Ormap *ORMapDelta `protobuf:"bytes,7,opt,name=ormap,proto3,oneof"`
}

type CrdtDelta_Vote struct {
	Vote *VoteDelta `protobuf:"bytes,8,opt,name=vote,proto3,oneof"`
}

func (*CrdtDelta_Gcounter) isCrdtDelta_Delta() {}

func (*CrdtDelta_Pncounter) isCrdtDelta_Delta() {}

func (*CrdtDelta_Gset) isCrdtDelta_Delta() {}

func (*CrdtDelta_Orset) isCrdtDelta_Delta() {}

func (*CrdtDelta_Lwwregister) isCrdtDelta_Delta() {}

func (*CrdtDelta_Flag) isCrdtDelta_Delta() {}

func (*CrdtDelta_Ormap) isCrdtDelta_Delta() {}

func (*CrdtDelta_Vote) isCrdtDelta_Delta() {}

type GCounterDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Increment uint64 `protobuf:"varint,1,opt,name=increment,proto3" json:"increment,omitempty"`
}

func (x *GCounterDelta) Reset() {
	*x = GCounterDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCounterDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCounterDelta) ProtoMessage() {}

func (x *GCounterDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCounterDelta.ProtoReflect.Descriptor instead.
func (*GCounterDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{13}
}

func (x *GCounterDelta) GetIncrement() uint64 {
	if x != nil {
		return x.Increment
	}
	return 0
}

type PNCounterDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change int64 `protobuf:"zigzag64,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (x *PNCounterDelta) Reset() {
	*x = PNCounterDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNCounterDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNCounterDelta) ProtoMessage() {}

func (x *PNCounterDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNCounterDelta.ProtoReflect.Descriptor instead.
func (*PNCounterDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{14}
}

func (x *PNCounterDelta) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

type GSetDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Added []*any.Any `protobuf:"bytes,1,rep,name=added,proto3" json:"added,omitempty"`
}

func (x *GSetDelta) Reset() {
	*x = GSetDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSetDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSetDelta) ProtoMessage() {}

func (x *GSetDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSetDelta.ProtoReflect.Descriptor instead.
func (*GSetDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{15}
}

func (x *GSetDelta) GetAdded() []*any.Any {
	if x != nil {
		return x.Added
	}
	return nil
}

type ORSetDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If cleared is set, the set must be cleared before added is processed.
	Cleared bool       `protobuf:"varint,1,opt,name=cleared,proto3" json:"cleared,omitempty"`
	Removed []*any.Any `protobuf:"bytes,2,rep,name=removed,proto3" json:"removed,omitempty"`
	Added   []*any.Any `protobuf:"bytes,3,rep,name=added,proto3" json:"added,omitempty"`
}

func (x *ORSetDelta) Reset() {
	*x = ORSetDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORSetDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORSetDelta) ProtoMessage() {}

func (x *ORSetDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORSetDelta.ProtoReflect.Descriptor instead.
func (*ORSetDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{16}
}

func (x *ORSetDelta) GetCleared() bool {
	if x != nil {
		return x.Cleared
	}
	return false
}

func (x *ORSetDelta) GetRemoved() []*any.Any {
	if x != nil {
		return x.Removed
	}
	return nil
}

func (x *ORSetDelta) GetAdded() []*any.Any {
	if x != nil {
		return x.Added
	}
	return nil
}

type LWWRegisterDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value            *any.Any  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Clock            CrdtClock `protobuf:"varint,2,opt,name=clock,proto3,enum=cloudstate.crdt.CrdtClock" json:"clock,omitempty"`
	CustomClockValue int64     `protobuf:"varint,3,opt,name=custom_clock_value,json=customClockValue,proto3" json:"custom_clock_value,omitempty"`
}

func (x *LWWRegisterDelta) Reset() {
	*x = LWWRegisterDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWWRegisterDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWWRegisterDelta) ProtoMessage() {}

func (x *LWWRegisterDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWWRegisterDelta.ProtoReflect.Descriptor instead.
func (*LWWRegisterDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{17}
}

func (x *LWWRegisterDelta) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LWWRegisterDelta) GetClock() CrdtClock {
	if x != nil {
		return x.Clock
	}
	return CrdtClock_DEFAULT
}

func (x *LWWRegisterDelta) GetCustomClockValue() int64 {
	if x != nil {
		return x.CustomClockValue
	}
	return 0
}

type FlagDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FlagDelta) Reset() {
	*x = FlagDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagDelta) ProtoMessage() {}

func (x *FlagDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagDelta.ProtoReflect.Descriptor instead.
func (*FlagDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{18}
}

func (x *FlagDelta) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type ORMapDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cleared bool               `protobuf:"varint,1,opt,name=cleared,proto3" json:"cleared,omitempty"`
	Removed []*any.Any         `protobuf:"bytes,2,rep,name=removed,proto3" json:"removed,omitempty"`
	Updated []*ORMapEntryDelta `protobuf:"bytes,3,rep,name=updated,proto3" json:"updated,omitempty"`
	Added   []*ORMapEntry      `protobuf:"bytes,4,rep,name=added,proto3" json:"added,omitempty"`
}

func (x *ORMapDelta) Reset() {
	*x = ORMapDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapDelta) ProtoMessage() {}

func (x *ORMapDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapDelta.ProtoReflect.Descriptor instead.
func (*ORMapDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{19}
}

func (x *ORMapDelta) GetCleared() bool {
	if x != nil {
		return x.Cleared
	}
	return false
}

func (x *ORMapDelta) GetRemoved() []*any.Any {
	if x != nil {
		return x.Removed
	}
	return nil
}

func (x *ORMapDelta) GetUpdated() []*ORMapEntryDelta {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *ORMapDelta) GetAdded() []*ORMapEntry {
	if x != nil {
		return x.Added
	}
	return nil
}

type ORMapEntryDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entry key.
	Key   *any.Any   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Delta *CrdtDelta `protobuf:"bytes,2,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *ORMapEntryDelta) Reset() {
	*x = ORMapEntryDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapEntryDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapEntryDelta) ProtoMessage() {}

func (x *ORMapEntryDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapEntryDelta.ProtoReflect.Descriptor instead.
func (*ORMapEntryDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{20}
}

func (x *ORMapEntryDelta) GetKey() *any.Any {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ORMapEntryDelta) GetDelta() *CrdtDelta {
	if x != nil {
		return x.Delta
	}
	return nil
}

type VoteDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only set by the user function to change the nodes current vote.
	SelfVote bool `protobuf:"varint,1,opt,name=self_vote,json=selfVote,proto3" json:"self_vote,omitempty"`
	// Only set by the proxy to change the votes for and total voters.
	VotesFor    int32 `protobuf:"varint,2,opt,name=votes_for,json=votesFor,proto3" json:"votes_for,omitempty"`
	TotalVoters int32 `protobuf:"varint,3,opt,name=total_voters,json=totalVoters,proto3" json:"total_voters,omitempty"`
}

func (x *VoteDelta) Reset() {
	*x = VoteDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteDelta) ProtoMessage() {}

func (x *VoteDelta) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteDelta.ProtoReflect.Descriptor instead.
func (*VoteDelta) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{21}
}

func (x *VoteDelta) GetSelfVote() bool {
	if x != nil {
		return x.SelfVote
	}
	return false
}

func (x *VoteDelta) GetVotesFor() int32 {
	if x != nil {
		return x.VotesFor
	}
	return 0
}

func (x *VoteDelta) GetTotalVoters() int32 {
	if x != nil {
		return x.TotalVoters
	}
	return 0
}

type CrdtInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string     `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EntityId    string     `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	State       *CrdtState `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CrdtInit) Reset() {
	*x = CrdtInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtInit) ProtoMessage() {}

func (x *CrdtInit) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtInit.ProtoReflect.Descriptor instead.
func (*CrdtInit) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{22}
}

func (x *CrdtInit) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CrdtInit) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *CrdtInit) GetState() *CrdtState {
	if x != nil {
		return x.State
	}
	return nil
}

type CrdtDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CrdtDelete) Reset() {
	*x = CrdtDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtDelete) ProtoMessage() {}

func (x *CrdtDelete) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtDelete.ProtoReflect.Descriptor instead.
func (*CrdtDelete) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{23}
}

type CrdtReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId    int64                  `protobuf:"varint,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	ClientAction *protocol.ClientAction `protobuf:"bytes,2,opt,name=client_action,json=clientAction,proto3" json:"client_action,omitempty"`
	SideEffects  []*protocol.SideEffect `protobuf:"bytes,4,rep,name=side_effects,json=sideEffects,proto3" json:"side_effects,omitempty"`
	StateAction  *CrdtStateAction       `protobuf:"bytes,5,opt,name=state_action,json=stateAction,proto3" json:"state_action,omitempty"`
	// If the request was streamed, setting this to true indicates that the command should
	// be handled as a stream. Subsequently, the user function may send CrdtStreamedMessage,
	// and a CrdtStreamCancelled message will be sent if the stream is cancelled (though
	// not if the a CrdtStreamedMessage ends the stream first).
	Streamed bool `protobuf:"varint,6,opt,name=streamed,proto3" json:"streamed,omitempty"`
}

func (x *CrdtReply) Reset() {
	*x = CrdtReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtReply) ProtoMessage() {}

func (x *CrdtReply) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtReply.ProtoReflect.Descriptor instead.
func (*CrdtReply) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{24}
}

func (x *CrdtReply) GetCommandId() int64 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *CrdtReply) GetClientAction() *protocol.ClientAction {
	if x != nil {
		return x.ClientAction
	}
	return nil
}

func (x *CrdtReply) GetSideEffects() []*protocol.SideEffect {
	if x != nil {
		return x.SideEffects
	}
	return nil
}

func (x *CrdtReply) GetStateAction() *CrdtStateAction {
	if x != nil {
		return x.StateAction
	}
	return nil
}

func (x *CrdtReply) GetStreamed() bool {
	if x != nil {
		return x.Streamed
	}
	return false
}

type CrdtStateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*CrdtStateAction_Create
	//	*CrdtStateAction_Update
	//	*CrdtStateAction_Delete
	Action           isCrdtStateAction_Action `protobuf_oneof:"action"`
	WriteConsistency CrdtWriteConsistency     `protobuf:"varint,8,opt,name=write_consistency,json=writeConsistency,proto3,enum=cloudstate.crdt.CrdtWriteConsistency" json:"write_consistency,omitempty"`
}

func (x *CrdtStateAction) Reset() {
	*x = CrdtStateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtStateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtStateAction) ProtoMessage() {}

func (x *CrdtStateAction) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtStateAction.ProtoReflect.Descriptor instead.
func (*CrdtStateAction) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{25}
}

func (m *CrdtStateAction) GetAction() isCrdtStateAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *CrdtStateAction) GetCreate() *CrdtState {
	if x, ok := x.GetAction().(*CrdtStateAction_Create); ok {
		return x.Create
	}
	return nil
}

func (x *CrdtStateAction) GetUpdate() *CrdtDelta {
	if x, ok := x.GetAction().(*CrdtStateAction_Update); ok {
		return x.Update
	}
	return nil
}

func (x *CrdtStateAction) GetDelete() *CrdtDelete {
	if x, ok := x.GetAction().(*CrdtStateAction_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *CrdtStateAction) GetWriteConsistency() CrdtWriteConsistency {
	if x != nil {
		return x.WriteConsistency
	}
	return CrdtWriteConsistency_LOCAL
}

type isCrdtStateAction_Action interface {
	isCrdtStateAction_Action()
}

type CrdtStateAction_Create struct {
	Create *CrdtState `protobuf:"bytes,5,opt,name=create,proto3,oneof"`
}

type CrdtStateAction_Update struct {
	Update *CrdtDelta `protobuf:"bytes,6,opt,name=update,proto3,oneof"`
}

type CrdtStateAction_Delete struct {
	Delete *CrdtDelete `protobuf:"bytes,7,opt,name=delete,proto3,oneof"`
}

func (*CrdtStateAction_Create) isCrdtStateAction_Action() {}

func (*CrdtStateAction_Update) isCrdtStateAction_Action() {}

func (*CrdtStateAction_Delete) isCrdtStateAction_Action() {}

// May be sent as often as liked if the first reply set streamed to true
type CrdtStreamedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId    int64                  `protobuf:"varint,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	ClientAction *protocol.ClientAction `protobuf:"bytes,2,opt,name=client_action,json=clientAction,proto3" json:"client_action,omitempty"`
	SideEffects  []*protocol.SideEffect `protobuf:"bytes,3,rep,name=side_effects,json=sideEffects,proto3" json:"side_effects,omitempty"`
	// Indicates the stream should end, no messages may be sent for this command after this.
	EndStream bool `protobuf:"varint,4,opt,name=end_stream,json=endStream,proto3" json:"end_stream,omitempty"`
}

func (x *CrdtStreamedMessage) Reset() {
	*x = CrdtStreamedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtStreamedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtStreamedMessage) ProtoMessage() {}

func (x *CrdtStreamedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtStreamedMessage.ProtoReflect.Descriptor instead.
func (*CrdtStreamedMessage) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{26}
}

func (x *CrdtStreamedMessage) GetCommandId() int64 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *CrdtStreamedMessage) GetClientAction() *protocol.ClientAction {
	if x != nil {
		return x.ClientAction
	}
	return nil
}

func (x *CrdtStreamedMessage) GetSideEffects() []*protocol.SideEffect {
	if x != nil {
		return x.SideEffects
	}
	return nil
}

func (x *CrdtStreamedMessage) GetEndStream() bool {
	if x != nil {
		return x.EndStream
	}
	return false
}

type CrdtStreamCancelledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId   int64                  `protobuf:"varint,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	SideEffects []*protocol.SideEffect `protobuf:"bytes,2,rep,name=side_effects,json=sideEffects,proto3" json:"side_effects,omitempty"`
	StateAction *CrdtStateAction       `protobuf:"bytes,3,opt,name=state_action,json=stateAction,proto3" json:"state_action,omitempty"`
}

func (x *CrdtStreamCancelledResponse) Reset() {
	*x = CrdtStreamCancelledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crdt_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrdtStreamCancelledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrdtStreamCancelledResponse) ProtoMessage() {}

func (x *CrdtStreamCancelledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crdt_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrdtStreamCancelledResponse.ProtoReflect.Descriptor instead.
func (*CrdtStreamCancelledResponse) Descriptor() ([]byte, []int) {
	return file_crdt_proto_rawDescGZIP(), []int{27}
}

func (x *CrdtStreamCancelledResponse) GetCommandId() int64 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *CrdtStreamCancelledResponse) GetSideEffects() []*protocol.SideEffect {
	if x != nil {
		return x.SideEffects
	}
	return nil
}

func (x *CrdtStreamCancelledResponse) GetStateAction() *CrdtStateAction {
	if x != nil {
		return x.StateAction
	}
	return nil
}

var File_crdt_proto protoreflect.FileDescriptor

var file_crdt_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xea, 0x02, 0x0a, 0x0c, 0x43, 0x72, 0x64, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72,
	0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12,
	0x37, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72,
	0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbe,
	0x02, 0x0a, 0x0d, 0x43, 0x72, 0x64, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x75, 0x74,
	0x12, 0x32, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74,
	0x2e, 0x43, 0x72, 0x64, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xda, 0x03, 0x0a, 0x09, 0x43, 0x72, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x08, 0x67, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x2e, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x67, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x70,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74,
	0x2e, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04,
	0x67, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x53, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x67, 0x73, 0x65, 0x74, 0x12, 0x33,
	0x0a, 0x05, 0x6f, 0x72, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e,
	0x4f, 0x52, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72,
	0x73, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x77, 0x77, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4c, 0x57, 0x57, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c,
	0x77, 0x77, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x05,
	0x6f, 0x72, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x6d, 0x61,
	0x70, 0x12, 0x30, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x25, 0x0a, 0x0d,
	0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x09, 0x47,
	0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x38, 0x0a, 0x0a, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x10, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74,
	0x2e, 0x43, 0x72, 0x64, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x21, 0x0a, 0x09, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x43, 0x0a, 0x0a, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x0a, 0x4f, 0x52, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43,
	0x72, 0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x68, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x66, 0x56, 0x6f, 0x74, 0x65, 0x22, 0xda, 0x03, 0x0a, 0x09, 0x43, 0x72,
	0x64, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x67, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x50, 0x4e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x67, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x04, 0x67, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x6f, 0x72, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x73, 0x65, 0x74, 0x12, 0x45, 0x0a,
	0x0b, 0x6c, 0x77, 0x77, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x2e, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x77, 0x77, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x6f, 0x72, 0x6d, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x6d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x0d, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x0e, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x37, 0x0a, 0x09, 0x47, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x05,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x4f, 0x52, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x22, 0x9e, 0x01,
	0x0a, 0x10, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e,
	0x43, 0x72, 0x64, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21,
	0x0a, 0x09, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0a, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x22, 0x6b, 0x0a, 0x0f, 0x4f, 0x52, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x7c, 0x0a, 0x08, 0x43, 0x72, 0x64, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72,
	0x64, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x0c,
	0x0a, 0x0a, 0x43, 0x72, 0x64, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x85, 0x02, 0x0a,
	0x09, 0x43, 0x72, 0x64, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x64, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74,
	0x2e, 0x43, 0x72, 0x64, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x10, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x64, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x73,
	0x69, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xbc, 0x01, 0x0a, 0x1b, 0x43, 0x72,
	0x64, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x38, 0x0a, 0x14, 0x43, 0x72, 0x64, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x41, 0x4a, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x09, 0x43, 0x72, 0x64, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x32, 0x53, 0x0a, 0x04, 0x43, 0x72, 0x64, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x75,
	0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0x55, 0x0a, 0x16, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5a,
	0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x69, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crdt_proto_rawDescOnce sync.Once
	file_crdt_proto_rawDescData = file_crdt_proto_rawDesc
)

func file_crdt_proto_rawDescGZIP() []byte {
	file_crdt_proto_rawDescOnce.Do(func() {
		file_crdt_proto_rawDescData = protoimpl.X.CompressGZIP(file_crdt_proto_rawDescData)
	})
	return file_crdt_proto_rawDescData
}

var file_crdt_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_crdt_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_crdt_proto_goTypes = []interface{}{
	(CrdtWriteConsistency)(0),           // 0: cloudstate.crdt.CrdtWriteConsistency
	(CrdtClock)(0),                      // 1: cloudstate.crdt.CrdtClock
	(*CrdtStreamIn)(nil),                // 2: cloudstate.crdt.CrdtStreamIn
	(*CrdtStreamOut)(nil),               // 3: cloudstate.crdt.CrdtStreamOut
	(*CrdtState)(nil),                   // 4: cloudstate.crdt.CrdtState
	(*GCounterState)(nil),               // 5: cloudstate.crdt.GCounterState
	(*PNCounterState)(nil),              // 6: cloudstate.crdt.PNCounterState
	(*GSetState)(nil),                   // 7: cloudstate.crdt.GSetState
	(*ORSetState)(nil),                  // 8: cloudstate.crdt.ORSetState
	(*LWWRegisterState)(nil),            // 9: cloudstate.crdt.LWWRegisterState
	(*FlagState)(nil),                   // 10: cloudstate.crdt.FlagState
	(*ORMapState)(nil),                  // 11: cloudstate.crdt.ORMapState
	(*ORMapEntry)(nil),                  // 12: cloudstate.crdt.ORMapEntry
	(*VoteState)(nil),                   // 13: cloudstate.crdt.VoteState
	(*CrdtDelta)(nil),                   // 14: cloudstate.crdt.CrdtDelta
	(*GCounterDelta)(nil),               // 15: cloudstate.crdt.GCounterDelta
	(*PNCounterDelta)(nil),              // 16: cloudstate.crdt.PNCounterDelta
	(*GSetDelta)(nil),                   // 17: cloudstate.crdt.GSetDelta
	(*ORSetDelta)(nil),                  // 18: cloudstate.crdt.ORSetDelta
	(*LWWRegisterDelta)(nil),            // 19: cloudstate.crdt.LWWRegisterDelta
	(*FlagDelta)(nil),                   // 20: cloudstate.crdt.FlagDelta
	(*ORMapDelta)(nil),                  // 21: cloudstate.crdt.ORMapDelta
	(*ORMapEntryDelta)(nil),             // 22: cloudstate.crdt.ORMapEntryDelta
	(*VoteDelta)(nil),                   // 23: cloudstate.crdt.VoteDelta
	(*CrdtInit)(nil),                    // 24: cloudstate.crdt.CrdtInit
	(*CrdtDelete)(nil),                  // 25: cloudstate.crdt.CrdtDelete
	(*CrdtReply)(nil),                   // 26: cloudstate.crdt.CrdtReply
	(*CrdtStateAction)(nil),             // 27: cloudstate.crdt.CrdtStateAction
	(*CrdtStreamedMessage)(nil),         // 28: cloudstate.crdt.CrdtStreamedMessage
	(*CrdtStreamCancelledResponse)(nil), // 29: cloudstate.crdt.CrdtStreamCancelledResponse
	(*protocol.Command)(nil),            // 30: cloudstate.Command
	(*protocol.StreamCancelled)(nil),    // 31: cloudstate.StreamCancelled
	(*protocol.Failure)(nil),            // 32: cloudstate.Failure
	(*any.Any)(nil),                     // 33: google.protobuf.Any
	(*protocol.ClientAction)(nil),       // 34: cloudstate.ClientAction
	(*protocol.SideEffect)(nil),         // 35: cloudstate.SideEffect
}
var file_crdt_proto_depIdxs = []int32{
	24, // 0: cloudstate.crdt.CrdtStreamIn.init:type_name -> cloudstate.crdt.CrdtInit
	4,  // 1: cloudstate.crdt.CrdtStreamIn.state:type_name -> cloudstate.crdt.CrdtState
	14, // 2: cloudstate.crdt.CrdtStreamIn.changed:type_name -> cloudstate.crdt.CrdtDelta
	25, // 3: cloudstate.crdt.CrdtStreamIn.deleted:type_name -> cloudstate.crdt.CrdtDelete
	30, // 4: cloudstate.crdt.CrdtStreamIn.command:type_name -> cloudstate.Command
	31, // 5: cloudstate.crdt.CrdtStreamIn.stream_cancelled:type_name -> cloudstate.StreamCancelled
	26, // 6: cloudstate.crdt.CrdtStreamOut.reply:type_name -> cloudstate.crdt.CrdtReply
	28, // 7: cloudstate.crdt.CrdtStreamOut.streamed_message:type_name -> cloudstate.crdt.CrdtStreamedMessage
	29, // 8: cloudstate.crdt.CrdtStreamOut.stream_cancelled_response:type_name -> cloudstate.crdt.CrdtStreamCancelledResponse
	32, // 9: cloudstate.crdt.CrdtStreamOut.failure:type_name -> cloudstate.Failure
	5,  // 10: cloudstate.crdt.CrdtState.gcounter:type_name -> cloudstate.crdt.GCounterState
	6,  // 11: cloudstate.crdt.CrdtState.pncounter:type_name -> cloudstate.crdt.PNCounterState
	7,  // 12: cloudstate.crdt.CrdtState.gset:type_name -> cloudstate.crdt.GSetState
	8,  // 13: cloudstate.crdt.CrdtState.orset:type_name -> cloudstate.crdt.ORSetState
	9,  // 14: cloudstate.crdt.CrdtState.lwwregister:type_name -> cloudstate.crdt.LWWRegisterState
	10, // 15: cloudstate.crdt.CrdtState.flag:type_name -> cloudstate.crdt.FlagState
	11, // 16: cloudstate.crdt.CrdtState.ormap:type_name -> cloudstate.crdt.ORMapState
	13, // 17: cloudstate.crdt.CrdtState.vote:type_name -> cloudstate.crdt.VoteState
	33, // 18: cloudstate.crdt.GSetState.items:type_name -> google.protobuf.Any
	33, // 19: cloudstate.crdt.ORSetState.items:type_name -> google.protobuf.Any
	33, // 20: cloudstate.crdt.LWWRegisterState.value:type_name -> google.protobuf.Any
	1,  // 21: cloudstate.crdt.LWWRegisterState.clock:type_name -> cloudstate.crdt.CrdtClock
	12, // 22: cloudstate.crdt.ORMapState.entries:type_name -> cloudstate.crdt.ORMapEntry
	33, // 23: cloudstate.crdt.ORMapEntry.key:type_name -> google.protobuf.Any
	4,  // 24: cloudstate.crdt.ORMapEntry.value:type_name -> cloudstate.crdt.CrdtState
	15, // 25: cloudstate.crdt.CrdtDelta.gcounter:type_name -> cloudstate.crdt.GCounterDelta
	16, // 26: cloudstate.crdt.CrdtDelta.pncounter:type_name -> cloudstate.crdt.PNCounterDelta
	17, // 27: cloudstate.crdt.CrdtDelta.gset:type_name -> cloudstate.crdt.GSetDelta
	18, // 28: cloudstate.crdt.CrdtDelta.orset:type_name -> cloudstate.crdt.ORSetDelta
	19, // 29: cloudstate.crdt.CrdtDelta.lwwregister:type_name -> cloudstate.crdt.LWWRegisterDelta
	20, // 30: cloudstate.crdt.CrdtDelta.flag:type_name -> cloudstate.crdt.FlagDelta
	21, // 31: cloudstate.crdt.CrdtDelta.ormap:type_name -> cloudstate.crdt.ORMapDelta
	23, // 32: cloudstate.crdt.CrdtDelta.vote:type_name -> cloudstate.crdt.VoteDelta
	33, // 33: cloudstate.crdt.GSetDelta.added:type_name -> google.protobuf.Any
	33, // 34: cloudstate.crdt.ORSetDelta.removed:type_name -> google.protobuf.Any
	33, // 35: cloudstate.crdt.ORSetDelta.added:type_name -> google.protobuf.Any
	33, // 36: cloudstate.crdt.LWWRegisterDelta.value:type_name -> google.protobuf.Any
	1,  // 37: cloudstate.crdt.LWWRegisterDelta.clock:type_name -> cloudstate.crdt.CrdtClock
	33, // 38: cloudstate.crdt.ORMapDelta.removed:type_name -> google.protobuf.Any
	22, // 39: cloudstate.crdt.ORMapDelta.updated:type_name -> cloudstate.crdt.ORMapEntryDelta
	12, // 40: cloudstate.crdt.ORMapDelta.added:type_name -> cloudstate.crdt.ORMapEntry
	33, // 41: cloudstate.crdt.ORMapEntryDelta.key:type_name -> google.protobuf.Any
	14, // 42: cloudstate.crdt.ORMapEntryDelta.delta:type_name -> cloudstate.crdt.CrdtDelta
	4,  // 43: cloudstate.crdt.CrdtInit.state:type_name -> cloudstate.crdt.CrdtState
	34, // 44: cloudstate.crdt.CrdtReply.client_action:type_name -> cloudstate.ClientAction
	35, // 45: cloudstate.crdt.CrdtReply.side_effects:type_name -> cloudstate.SideEffect
	27, // 46: cloudstate.crdt.CrdtReply.state_action:type_name -> cloudstate.crdt.CrdtStateAction
	4,  // 47: cloudstate.crdt.CrdtStateAction.create:type_name -> cloudstate.crdt.CrdtState
	14, // 48: cloudstate.crdt.CrdtStateAction.update:type_name -> cloudstate.crdt.CrdtDelta
	25, // 49: cloudstate.crdt.CrdtStateAction.delete:type_name -> cloudstate.crdt.CrdtDelete
	0,  // 50: cloudstate.crdt.CrdtStateAction.write_consistency:type_name -> cloudstate.crdt.CrdtWriteConsistency
	34, // 51: cloudstate.crdt.CrdtStreamedMessage.client_action:type_name -> cloudstate.ClientAction
	35, // 52: cloudstate.crdt.CrdtStreamedMessage.side_effects:type_name -> cloudstate.SideEffect
	35, // 53: cloudstate.crdt.CrdtStreamCancelledResponse.side_effects:type_name -> cloudstate.SideEffect
	27, // 54: cloudstate.crdt.CrdtStreamCancelledResponse.state_action:type_name -> cloudstate.crdt.CrdtStateAction
	2,  // 55: cloudstate.crdt.Crdt.handle:input_type -> cloudstate.crdt.CrdtStreamIn
	3,  // 56: cloudstate.crdt.Crdt.handle:output_type -> cloudstate.crdt.CrdtStreamOut
	56, // [56:57] is the sub-list for method output_type
	55, // [55:56] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_crdt_proto_init() }
func file_crdt_proto_init() {
	if File_crdt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crdt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtStreamIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtStreamOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCounterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNCounterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORSetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWWRegisterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCounterDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNCounterDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSetDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORSetDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWWRegisterDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapEntryDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtStateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtStreamedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crdt_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrdtStreamCancelledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_crdt_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CrdtStreamIn_Init)(nil),
		(*CrdtStreamIn_State)(nil),
		(*CrdtStreamIn_Changed)(nil),
		(*CrdtStreamIn_Deleted)(nil),
		(*CrdtStreamIn_Command)(nil),
		(*CrdtStreamIn_StreamCancelled)(nil),
	}
	file_crdt_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CrdtStreamOut_Reply)(nil),
		(*CrdtStreamOut_StreamedMessage)(nil),
		(*CrdtStreamOut_StreamCancelledResponse)(nil),
		(*CrdtStreamOut_Failure)(nil),
	}
	file_crdt_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CrdtState_Gcounter)(nil),
		(*CrdtState_Pncounter)(nil),
		(*CrdtState_Gset)(nil),
		(*CrdtState_Orset)(nil),
		(*CrdtState_Lwwregister)(nil),
		(*CrdtState_Flag)(nil),
		(*CrdtState_Ormap)(nil),
		(*CrdtState_Vote)(nil),
	}
	file_crdt_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*CrdtDelta_Gcounter)(nil),
		(*CrdtDelta_Pncounter)(nil),
		(*CrdtDelta_Gset)(nil),
		(*CrdtDelta_Orset)(nil),
		(*CrdtDelta_Lwwregister)(nil),
		(*CrdtDelta_Flag)(nil),
		(*CrdtDelta_Ormap)(nil),
		(*CrdtDelta_Vote)(nil),
	}
	file_crdt_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*CrdtStateAction_Create)(nil),
		(*CrdtStateAction_Update)(nil),
		(*CrdtStateAction_Delete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crdt_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crdt_proto_goTypes,
		DependencyIndexes: file_crdt_proto_depIdxs,
		EnumInfos:         file_crdt_proto_enumTypes,
		MessageInfos:      file_crdt_proto_msgTypes,
	}.Build()
	File_crdt_proto = out.File
	file_crdt_proto_rawDesc = nil
	file_crdt_proto_goTypes = nil
	file_crdt_proto_depIdxs = nil
}
