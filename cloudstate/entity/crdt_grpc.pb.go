// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CrdtClient is the client API for Crdt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrdtClient interface {
	// After invoking handle, the first message sent will always be a CrdtInit message, containing the entity ID, and,
	// if it exists or is available, the current state of the entity. After that, one or more commands may be sent,
	// as well as deltas as they arrive, and the entire state if either the entity is created, or the proxy wishes the
	// user function to replace its entire state.
	//
	// The user function must respond with one reply per command in. They do not necessarily have to be sent in the same
	// order that the commands were sent, the command ID is used to correlate commands to replies.
	Handle(ctx context.Context, opts ...grpc.CallOption) (Crdt_HandleClient, error)
}

type crdtClient struct {
	cc grpc.ClientConnInterface
}

func NewCrdtClient(cc grpc.ClientConnInterface) CrdtClient {
	return &crdtClient{cc}
}

func (c *crdtClient) Handle(ctx context.Context, opts ...grpc.CallOption) (Crdt_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Crdt_serviceDesc.Streams[0], "/cloudstate.crdt.Crdt/handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &crdtHandleClient{stream}
	return x, nil
}

type Crdt_HandleClient interface {
	Send(*CrdtStreamIn) error
	Recv() (*CrdtStreamOut, error)
	grpc.ClientStream
}

type crdtHandleClient struct {
	grpc.ClientStream
}

func (x *crdtHandleClient) Send(m *CrdtStreamIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *crdtHandleClient) Recv() (*CrdtStreamOut, error) {
	m := new(CrdtStreamOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrdtServer is the server API for Crdt service.
// All implementations must embed UnimplementedCrdtServer
// for forward compatibility
type CrdtServer interface {
	// After invoking handle, the first message sent will always be a CrdtInit message, containing the entity ID, and,
	// if it exists or is available, the current state of the entity. After that, one or more commands may be sent,
	// as well as deltas as they arrive, and the entire state if either the entity is created, or the proxy wishes the
	// user function to replace its entire state.
	//
	// The user function must respond with one reply per command in. They do not necessarily have to be sent in the same
	// order that the commands were sent, the command ID is used to correlate commands to replies.
	Handle(Crdt_HandleServer) error
	mustEmbedUnimplementedCrdtServer()
}

// UnimplementedCrdtServer must be embedded to have forward compatible implementations.
type UnimplementedCrdtServer struct {
}

func (UnimplementedCrdtServer) Handle(Crdt_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedCrdtServer) mustEmbedUnimplementedCrdtServer() {}

// UnsafeCrdtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrdtServer will
// result in compilation errors.
type UnsafeCrdtServer interface {
	mustEmbedUnimplementedCrdtServer()
}

func RegisterCrdtServer(s *grpc.Server, srv CrdtServer) {
	s.RegisterService(&_Crdt_serviceDesc, srv)
}

func _Crdt_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CrdtServer).Handle(&crdtHandleServer{stream})
}

type Crdt_HandleServer interface {
	Send(*CrdtStreamOut) error
	Recv() (*CrdtStreamIn, error)
	grpc.ServerStream
}

type crdtHandleServer struct {
	grpc.ServerStream
}

func (x *crdtHandleServer) Send(m *CrdtStreamOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *crdtHandleServer) Recv() (*CrdtStreamIn, error) {
	m := new(CrdtStreamIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Crdt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.crdt.Crdt",
	HandlerType: (*CrdtServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "handle",
			Handler:       _Crdt_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "crdt.proto",
}
