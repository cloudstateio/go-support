// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// gRPC interface for Stateless Entity user functions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: function.proto

package entity

import (
	context "context"
	protocol "github.com/cloudstateio/go-support/cloudstate/protocol"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// A function command.
//
// For unary and streamed out calls, the service name, command name and payload will always be set.
//
// For streamed in and duplex streamed calls, the first command sent will just contain the service
// name and command name, but no payload. This will indicate that the function has been invoked.
// Subsequent commands on the stream will only have the payload set, the service name and command
// name will not be set.
type FunctionCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the service this function is on.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Command name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The command payload.
	Payload *any.Any `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// Metadata
	Metadata *protocol.Metadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FunctionCommand) Reset() {
	*x = FunctionCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_function_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCommand) ProtoMessage() {}

func (x *FunctionCommand) ProtoReflect() protoreflect.Message {
	mi := &file_function_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCommand.ProtoReflect.Descriptor instead.
func (*FunctionCommand) Descriptor() ([]byte, []int) {
	return file_function_proto_rawDescGZIP(), []int{0}
}

func (x *FunctionCommand) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *FunctionCommand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionCommand) GetPayload() *any.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *FunctionCommand) GetMetadata() *protocol.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FunctionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*FunctionReply_Failure
	//	*FunctionReply_Reply
	//	*FunctionReply_Forward
	Response    isFunctionReply_Response `protobuf_oneof:"response"`
	SideEffects []*protocol.SideEffect   `protobuf:"bytes,4,rep,name=side_effects,json=sideEffects,proto3" json:"side_effects,omitempty"`
}

func (x *FunctionReply) Reset() {
	*x = FunctionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_function_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionReply) ProtoMessage() {}

func (x *FunctionReply) ProtoReflect() protoreflect.Message {
	mi := &file_function_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionReply.ProtoReflect.Descriptor instead.
func (*FunctionReply) Descriptor() ([]byte, []int) {
	return file_function_proto_rawDescGZIP(), []int{1}
}

func (m *FunctionReply) GetResponse() isFunctionReply_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *FunctionReply) GetFailure() *protocol.Failure {
	if x, ok := x.GetResponse().(*FunctionReply_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *FunctionReply) GetReply() *protocol.Reply {
	if x, ok := x.GetResponse().(*FunctionReply_Reply); ok {
		return x.Reply
	}
	return nil
}

func (x *FunctionReply) GetForward() *protocol.Forward {
	if x, ok := x.GetResponse().(*FunctionReply_Forward); ok {
		return x.Forward
	}
	return nil
}

func (x *FunctionReply) GetSideEffects() []*protocol.SideEffect {
	if x != nil {
		return x.SideEffects
	}
	return nil
}

type isFunctionReply_Response interface {
	isFunctionReply_Response()
}

type FunctionReply_Failure struct {
	Failure *protocol.Failure `protobuf:"bytes,1,opt,name=failure,proto3,oneof"`
}

type FunctionReply_Reply struct {
	Reply *protocol.Reply `protobuf:"bytes,2,opt,name=reply,proto3,oneof"`
}

type FunctionReply_Forward struct {
	Forward *protocol.Forward `protobuf:"bytes,3,opt,name=forward,proto3,oneof"`
}

func (*FunctionReply_Failure) isFunctionReply_Response() {}

func (*FunctionReply_Reply) isFunctionReply_Response() {}

func (*FunctionReply_Forward) isFunctionReply_Response() {}

var File_function_proto protoreflect.FileDescriptor

var file_function_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe3, 0x01, 0x0a, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x95, 0x03, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x10, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x49,
	0x6e, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x61, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x60, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x64, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x55, 0x0a, 0x16, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x69, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_function_proto_rawDescOnce sync.Once
	file_function_proto_rawDescData = file_function_proto_rawDesc
)

func file_function_proto_rawDescGZIP() []byte {
	file_function_proto_rawDescOnce.Do(func() {
		file_function_proto_rawDescData = protoimpl.X.CompressGZIP(file_function_proto_rawDescData)
	})
	return file_function_proto_rawDescData
}

var file_function_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_function_proto_goTypes = []interface{}{
	(*FunctionCommand)(nil),     // 0: cloudstate.function.FunctionCommand
	(*FunctionReply)(nil),       // 1: cloudstate.function.FunctionReply
	(*any.Any)(nil),             // 2: google.protobuf.Any
	(*protocol.Metadata)(nil),   // 3: cloudstate.Metadata
	(*protocol.Failure)(nil),    // 4: cloudstate.Failure
	(*protocol.Reply)(nil),      // 5: cloudstate.Reply
	(*protocol.Forward)(nil),    // 6: cloudstate.Forward
	(*protocol.SideEffect)(nil), // 7: cloudstate.SideEffect
}
var file_function_proto_depIdxs = []int32{
	2,  // 0: cloudstate.function.FunctionCommand.payload:type_name -> google.protobuf.Any
	3,  // 1: cloudstate.function.FunctionCommand.metadata:type_name -> cloudstate.Metadata
	4,  // 2: cloudstate.function.FunctionReply.failure:type_name -> cloudstate.Failure
	5,  // 3: cloudstate.function.FunctionReply.reply:type_name -> cloudstate.Reply
	6,  // 4: cloudstate.function.FunctionReply.forward:type_name -> cloudstate.Forward
	7,  // 5: cloudstate.function.FunctionReply.side_effects:type_name -> cloudstate.SideEffect
	0,  // 6: cloudstate.function.StatelessFunction.handleUnary:input_type -> cloudstate.function.FunctionCommand
	0,  // 7: cloudstate.function.StatelessFunction.handleStreamedIn:input_type -> cloudstate.function.FunctionCommand
	0,  // 8: cloudstate.function.StatelessFunction.handleStreamedOut:input_type -> cloudstate.function.FunctionCommand
	0,  // 9: cloudstate.function.StatelessFunction.handleStreamed:input_type -> cloudstate.function.FunctionCommand
	1,  // 10: cloudstate.function.StatelessFunction.handleUnary:output_type -> cloudstate.function.FunctionReply
	1,  // 11: cloudstate.function.StatelessFunction.handleStreamedIn:output_type -> cloudstate.function.FunctionReply
	1,  // 12: cloudstate.function.StatelessFunction.handleStreamedOut:output_type -> cloudstate.function.FunctionReply
	1,  // 13: cloudstate.function.StatelessFunction.handleStreamed:output_type -> cloudstate.function.FunctionReply
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_function_proto_init() }
func file_function_proto_init() {
	if File_function_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_function_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_function_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_function_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FunctionReply_Failure)(nil),
		(*FunctionReply_Reply)(nil),
		(*FunctionReply_Forward)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_function_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_function_proto_goTypes,
		DependencyIndexes: file_function_proto_depIdxs,
		MessageInfos:      file_function_proto_msgTypes,
	}.Build()
	File_function_proto = out.File
	file_function_proto_rawDesc = nil
	file_function_proto_goTypes = nil
	file_function_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StatelessFunctionClient is the client API for StatelessFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatelessFunctionClient interface {
	// Handle a unary command.
	//
	// The input command will contain the service name, command name, request metadata and the command
	// payload. The reply may contain a direct reply, a forward or a failure, and it may contain many
	// side effects.
	HandleUnary(ctx context.Context, in *FunctionCommand, opts ...grpc.CallOption) (*FunctionReply, error)
	// Handle a streamed in command.
	//
	// The first message in will contain the request metadata, including the service name and command
	// name. It will not have an associated payload set. This will be followed by zero to many messages
	// in with a payload, but no service name or command name set.
	//
	// If the underlying transport supports per stream metadata, rather than per message metadata, then
	// that metadata will only be included in the metadata of the first message. In contrast, if the
	// underlying transport supports per message metadata, there will be no metadata on the first message,
	// the metadata will instead be found on each subsequent message.
	//
	// The semantics of stream closure in this protocol map 1:1 with the semantics of gRPC stream closure,
	// that is, when the client closes the stream, the stream is considered half closed, and the server
	// should eventually, but not necessarily immediately, send a response message with a status code and
	// trailers.
	//
	// If however the server sends a response message before the client closes the stream, the stream is
	// completely closed, and the client should handle this and stop sending more messages.
	//
	// Either the client or the server may cancel the stream at any time, cancellation is indicated
	// through an HTTP2 stream RST message.
	HandleStreamedIn(ctx context.Context, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedInClient, error)
	// Handle a streamed out command.
	//
	// The input command will contain the service name, command name, request metadata and the command
	// payload. Zero or more replies may be sent, each containing either a direct reply, a forward or a
	// failure, and each may contain many side effects. The stream to the client will be closed when the
	// this stream is closed, with the same status as this stream is closed with.
	//
	// Either the client or the server may cancel the stream at any time, cancellation is indicated
	// through an HTTP2 stream RST message.
	HandleStreamedOut(ctx context.Context, in *FunctionCommand, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedOutClient, error)
	// Handle a full duplex streamed command.
	//
	// The first message in will contain the request metadata, including the service name and command
	// name. It will not have an associated payload set. This will be followed by zero to many messages
	// in with a payload, but no service name or command name set.
	//
	// Zero or more replies may be sent, each containing either a direct reply, a forward or a failure,
	// and each may contain many side effects.
	//
	// If the underlying transport supports per stream metadata, rather than per message metadata, then
	// that metadata will only be included in the metadata of the first message. In contrast, if the
	// underlying transport supports per message metadata, there will be no metadata on the first message,
	// the metadata will instead be found on each subsequent message.
	//
	// The semantics of stream closure in this protocol map 1:1 with the semantics of gRPC stream closure,
	// that is, when the client closes the stream, the stream is considered half closed, and the server
	// should eventually, but not necessarily immediately, close the stream with a status code and
	// trailers.
	//
	// If however the server closes the stream with a status code and trailers, the stream is immediately
	// considered completely closed, and no further messages sent by the client will be handled by the
	// server.
	//
	// Either the client or the server may cancel the stream at any time, cancellation is indicated
	// through an HTTP2 stream RST message.
	HandleStreamed(ctx context.Context, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedClient, error)
}

type statelessFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewStatelessFunctionClient(cc grpc.ClientConnInterface) StatelessFunctionClient {
	return &statelessFunctionClient{cc}
}

func (c *statelessFunctionClient) HandleUnary(ctx context.Context, in *FunctionCommand, opts ...grpc.CallOption) (*FunctionReply, error) {
	out := new(FunctionReply)
	err := c.cc.Invoke(ctx, "/cloudstate.function.StatelessFunction/handleUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statelessFunctionClient) HandleStreamedIn(ctx context.Context, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StatelessFunction_serviceDesc.Streams[0], "/cloudstate.function.StatelessFunction/handleStreamedIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &statelessFunctionHandleStreamedInClient{stream}
	return x, nil
}

type StatelessFunction_HandleStreamedInClient interface {
	Send(*FunctionCommand) error
	CloseAndRecv() (*FunctionReply, error)
	grpc.ClientStream
}

type statelessFunctionHandleStreamedInClient struct {
	grpc.ClientStream
}

func (x *statelessFunctionHandleStreamedInClient) Send(m *FunctionCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statelessFunctionHandleStreamedInClient) CloseAndRecv() (*FunctionReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FunctionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statelessFunctionClient) HandleStreamedOut(ctx context.Context, in *FunctionCommand, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StatelessFunction_serviceDesc.Streams[1], "/cloudstate.function.StatelessFunction/handleStreamedOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &statelessFunctionHandleStreamedOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatelessFunction_HandleStreamedOutClient interface {
	Recv() (*FunctionReply, error)
	grpc.ClientStream
}

type statelessFunctionHandleStreamedOutClient struct {
	grpc.ClientStream
}

func (x *statelessFunctionHandleStreamedOutClient) Recv() (*FunctionReply, error) {
	m := new(FunctionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statelessFunctionClient) HandleStreamed(ctx context.Context, opts ...grpc.CallOption) (StatelessFunction_HandleStreamedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StatelessFunction_serviceDesc.Streams[2], "/cloudstate.function.StatelessFunction/handleStreamed", opts...)
	if err != nil {
		return nil, err
	}
	x := &statelessFunctionHandleStreamedClient{stream}
	return x, nil
}

type StatelessFunction_HandleStreamedClient interface {
	Send(*FunctionCommand) error
	Recv() (*FunctionReply, error)
	grpc.ClientStream
}

type statelessFunctionHandleStreamedClient struct {
	grpc.ClientStream
}

func (x *statelessFunctionHandleStreamedClient) Send(m *FunctionCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statelessFunctionHandleStreamedClient) Recv() (*FunctionReply, error) {
	m := new(FunctionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatelessFunctionServer is the server API for StatelessFunction service.
type StatelessFunctionServer interface {
	// Handle a unary command.
	//
	// The input command will contain the service name, command name, request metadata and the command
	// payload. The reply may contain a direct reply, a forward or a failure, and it may contain many
	// side effects.
	HandleUnary(context.Context, *FunctionCommand) (*FunctionReply, error)
	// Handle a streamed in command.
	//
	// The first message in will contain the request metadata, including the service name and command
	// name. It will not have an associated payload set. This will be followed by zero to many messages
	// in with a payload, but no service name or command name set.
	//
	// If the underlying transport supports per stream metadata, rather than per message metadata, then
	// that metadata will only be included in the metadata of the first message. In contrast, if the
	// underlying transport supports per message metadata, there will be no metadata on the first message,
	// the metadata will instead be found on each subsequent message.
	//
	// The semantics of stream closure in this protocol map 1:1 with the semantics of gRPC stream closure,
	// that is, when the client closes the stream, the stream is considered half closed, and the server
	// should eventually, but not necessarily immediately, send a response message with a status code and
	// trailers.
	//
	// If however the server sends a response message before the client closes the stream, the stream is
	// completely closed, and the client should handle this and stop sending more messages.
	//
	// Either the client or the server may cancel the stream at any time, cancellation is indicated
	// through an HTTP2 stream RST message.
	HandleStreamedIn(StatelessFunction_HandleStreamedInServer) error
	// Handle a streamed out command.
	//
	// The input command will contain the service name, command name, request metadata and the command
	// payload. Zero or more replies may be sent, each containing either a direct reply, a forward or a
	// failure, and each may contain many side effects. The stream to the client will be closed when the
	// this stream is closed, with the same status as this stream is closed with.
	//
	// Either the client or the server may cancel the stream at any time, cancellation is indicated
	// through an HTTP2 stream RST message.
	HandleStreamedOut(*FunctionCommand, StatelessFunction_HandleStreamedOutServer) error
	// Handle a full duplex streamed command.
	//
	// The first message in will contain the request metadata, including the service name and command
	// name. It will not have an associated payload set. This will be followed by zero to many messages
	// in with a payload, but no service name or command name set.
	//
	// Zero or more replies may be sent, each containing either a direct reply, a forward or a failure,
	// and each may contain many side effects.
	//
	// If the underlying transport supports per stream metadata, rather than per message metadata, then
	// that metadata will only be included in the metadata of the first message. In contrast, if the
	// underlying transport supports per message metadata, there will be no metadata on the first message,
	// the metadata will instead be found on each subsequent message.
	//
	// The semantics of stream closure in this protocol map 1:1 with the semantics of gRPC stream closure,
	// that is, when the client closes the stream, the stream is considered half closed, and the server
	// should eventually, but not necessarily immediately, close the stream with a status code and
	// trailers.
	//
	// If however the server closes the stream with a status code and trailers, the stream is immediately
	// considered completely closed, and no further messages sent by the client will be handled by the
	// server.
	//
	// Either the client or the server may cancel the stream at any time, cancellation is indicated
	// through an HTTP2 stream RST message.
	HandleStreamed(StatelessFunction_HandleStreamedServer) error
}

// UnimplementedStatelessFunctionServer can be embedded to have forward compatible implementations.
type UnimplementedStatelessFunctionServer struct {
}

func (*UnimplementedStatelessFunctionServer) HandleUnary(context.Context, *FunctionCommand) (*FunctionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUnary not implemented")
}
func (*UnimplementedStatelessFunctionServer) HandleStreamedIn(StatelessFunction_HandleStreamedInServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleStreamedIn not implemented")
}
func (*UnimplementedStatelessFunctionServer) HandleStreamedOut(*FunctionCommand, StatelessFunction_HandleStreamedOutServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleStreamedOut not implemented")
}
func (*UnimplementedStatelessFunctionServer) HandleStreamed(StatelessFunction_HandleStreamedServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleStreamed not implemented")
}

func RegisterStatelessFunctionServer(s *grpc.Server, srv StatelessFunctionServer) {
	s.RegisterService(&_StatelessFunction_serviceDesc, srv)
}

func _StatelessFunction_HandleUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatelessFunctionServer).HandleUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.function.StatelessFunction/HandleUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatelessFunctionServer).HandleUnary(ctx, req.(*FunctionCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatelessFunction_HandleStreamedIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatelessFunctionServer).HandleStreamedIn(&statelessFunctionHandleStreamedInServer{stream})
}

type StatelessFunction_HandleStreamedInServer interface {
	SendAndClose(*FunctionReply) error
	Recv() (*FunctionCommand, error)
	grpc.ServerStream
}

type statelessFunctionHandleStreamedInServer struct {
	grpc.ServerStream
}

func (x *statelessFunctionHandleStreamedInServer) SendAndClose(m *FunctionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statelessFunctionHandleStreamedInServer) Recv() (*FunctionCommand, error) {
	m := new(FunctionCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StatelessFunction_HandleStreamedOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionCommand)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatelessFunctionServer).HandleStreamedOut(m, &statelessFunctionHandleStreamedOutServer{stream})
}

type StatelessFunction_HandleStreamedOutServer interface {
	Send(*FunctionReply) error
	grpc.ServerStream
}

type statelessFunctionHandleStreamedOutServer struct {
	grpc.ServerStream
}

func (x *statelessFunctionHandleStreamedOutServer) Send(m *FunctionReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StatelessFunction_HandleStreamed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatelessFunctionServer).HandleStreamed(&statelessFunctionHandleStreamedServer{stream})
}

type StatelessFunction_HandleStreamedServer interface {
	Send(*FunctionReply) error
	Recv() (*FunctionCommand, error)
	grpc.ServerStream
}

type statelessFunctionHandleStreamedServer struct {
	grpc.ServerStream
}

func (x *statelessFunctionHandleStreamedServer) Send(m *FunctionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statelessFunctionHandleStreamedServer) Recv() (*FunctionCommand, error) {
	m := new(FunctionCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StatelessFunction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.function.StatelessFunction",
	HandlerType: (*StatelessFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "handleUnary",
			Handler:    _StatelessFunction_HandleUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "handleStreamedIn",
			Handler:       _StatelessFunction_HandleStreamedIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "handleStreamedOut",
			Handler:       _StatelessFunction_HandleStreamedOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "handleStreamed",
			Handler:       _StatelessFunction_HandleStreamed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "function.proto",
}
